// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Email is an object representing the database table.
type Email struct {
	EmailID    uint64    `boil:"email_id" json:"email_id" toml:"email_id" yaml:"email_id"`
	Title      string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Content    string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	StartTime  int       `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime    int       `boil:"end_time" json:"end_time" toml:"end_time" yaml:"end_time"`
	EmailType  bool      `boil:"email_type" json:"email_type" toml:"email_type" yaml:"email_type"`
	Attaches   string    `boil:"attaches" json:"attaches" toml:"attaches" yaml:"attaches"`
	CreateTime int       `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *emailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L emailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmailColumns = struct {
	EmailID    string
	Title      string
	Content    string
	StartTime  string
	EndTime    string
	EmailType  string
	Attaches   string
	CreateTime string
	UpdatedAt  string
}{
	EmailID:    "email_id",
	Title:      "title",
	Content:    "content",
	StartTime:  "start_time",
	EndTime:    "end_time",
	EmailType:  "email_type",
	Attaches:   "attaches",
	CreateTime: "create_time",
	UpdatedAt:  "updated_at",
}

// EmailRels is where relationship names are stored.
var EmailRels = struct {
}{}

// emailR is where relationships are stored.
type emailR struct {
}

// NewStruct creates a new relationship struct
func (*emailR) NewStruct() *emailR {
	return &emailR{}
}

// emailL is where Load methods for each relationship are stored.
type emailL struct{}

var (
	emailColumns               = []string{"email_id", "title", "content", "start_time", "end_time", "email_type", "attaches", "create_time", "updated_at"}
	emailColumnsWithoutDefault = []string{"title", "content", "attaches"}
	emailColumnsWithDefault    = []string{"email_id", "start_time", "end_time", "email_type", "create_time", "updated_at"}
	emailPrimaryKeyColumns     = []string{"email_id"}
)

type (
	// EmailSlice is an alias for a slice of pointers to Email.
	// This should generally be used opposed to []Email.
	EmailSlice []*Email

	emailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	emailType                 = reflect.TypeOf(&Email{})
	emailMapping              = queries.MakeStructMapping(emailType)
	emailPrimaryKeyMapping, _ = queries.BindMapping(emailType, emailMapping, emailPrimaryKeyColumns)
	emailInsertCacheMut       sync.RWMutex
	emailInsertCache          = make(map[string]insertCache)
	emailUpdateCacheMut       sync.RWMutex
	emailUpdateCache          = make(map[string]updateCache)
	emailUpsertCacheMut       sync.RWMutex
	emailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single email record from the query.
func (q emailQuery) One(exec boil.Executor) (*Email, error) {
	o := &Email{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for email")
	}

	return o, nil
}

// All returns all Email records from the query.
func (q emailQuery) All(exec boil.Executor) (EmailSlice, error) {
	var o []*Email

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Email slice")
	}

	return o, nil
}

// Count returns the count of all Email records in the query.
func (q emailQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count email rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q emailQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if email exists")
	}

	return count > 0, nil
}

// Emails retrieves all the records using an executor.
func Emails(mods ...qm.QueryMod) emailQuery {
	mods = append(mods, qm.From("`email`"))
	return emailQuery{NewQuery(mods...)}
}

// FindEmail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmail(exec boil.Executor, emailID uint64, selectCols ...string) (*Email, error) {
	emailObj := &Email{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `email` where `email_id`=?", sel,
	)

	q := queries.Raw(query, emailID)

	err := q.Bind(nil, exec, emailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from email")
	}

	return emailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Email) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no email provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(emailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	emailInsertCacheMut.RLock()
	cache, cached := emailInsertCache[key]
	emailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			emailColumns,
			emailColumnsWithDefault,
			emailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(emailType, emailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(emailType, emailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `email` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `email` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `email` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, emailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into email")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.EmailID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == emailMapping["EmailID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.EmailID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for email")
	}

CacheNoHooks:
	if !cached {
		emailInsertCacheMut.Lock()
		emailInsertCache[key] = cache
		emailInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Email.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Email) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	emailUpdateCacheMut.RLock()
	cache, cached := emailUpdateCache[key]
	emailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			emailColumns,
			emailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update email, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `email` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, emailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(emailType, emailMapping, append(wl, emailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update email row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for email")
	}

	if !cached {
		emailUpdateCacheMut.Lock()
		emailUpdateCache[key] = cache
		emailUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q emailQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for email")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for email")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmailSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `email` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in email slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all email")
	}
	return rowsAff, nil
}

var mySQLEmailUniqueColumns = []string{
	"email_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Email) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no email provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(emailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEmailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	emailUpsertCacheMut.RLock()
	cache, cached := emailUpsertCache[key]
	emailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			emailColumns,
			emailColumnsWithDefault,
			emailColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			emailColumns,
			emailPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert email, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "email", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `email` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(emailType, emailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(emailType, emailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for email")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.EmailID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == emailMapping["email_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(emailType, emailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for email")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for email")
	}

CacheNoHooks:
	if !cached {
		emailUpsertCacheMut.Lock()
		emailUpsertCache[key] = cache
		emailUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Email record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Email) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Email provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), emailPrimaryKeyMapping)
	sql := "DELETE FROM `email` WHERE `email_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from email")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for email")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q emailQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no emailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from email")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for email")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmailSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Email slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `email` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from email slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for email")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Email) Reload(exec boil.Executor) error {
	ret, err := FindEmail(exec, o.EmailID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `email`.* FROM `email` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmailSlice")
	}

	*o = slice

	return nil
}

// EmailExists checks if the Email row exists.
func EmailExists(exec boil.Executor, emailID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `email` where `email_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, emailID)
	}

	row := exec.QueryRow(sql, emailID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if email exists")
	}

	return exists, nil
}
