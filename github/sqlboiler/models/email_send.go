// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// EmailSend is an object representing the database table.
type EmailSend struct {
	DataID          uint64    `boil:"data_id" json:"data_id" toml:"data_id" yaml:"data_id"`
	UserID          uint64    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	EmailID         uint64    `boil:"email_id" json:"email_id" toml:"email_id" yaml:"email_id"`
	EmailType       bool      `boil:"email_type" json:"email_type" toml:"email_type" yaml:"email_type"`
	IsRead          bool      `boil:"is_read" json:"is_read" toml:"is_read" yaml:"is_read"`
	IsDel           bool      `boil:"is_del" json:"is_del" toml:"is_del" yaml:"is_del"`
	IsAttachReceive bool      `boil:"is_attach_receive" json:"is_attach_receive" toml:"is_attach_receive" yaml:"is_attach_receive"`
	GetTime         int       `boil:"get_time" json:"get_time" toml:"get_time" yaml:"get_time"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *emailSendR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L emailSendL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmailSendColumns = struct {
	DataID          string
	UserID          string
	EmailID         string
	EmailType       string
	IsRead          string
	IsDel           string
	IsAttachReceive string
	GetTime         string
	UpdatedAt       string
}{
	DataID:          "data_id",
	UserID:          "user_id",
	EmailID:         "email_id",
	EmailType:       "email_type",
	IsRead:          "is_read",
	IsDel:           "is_del",
	IsAttachReceive: "is_attach_receive",
	GetTime:         "get_time",
	UpdatedAt:       "updated_at",
}

// EmailSendRels is where relationship names are stored.
var EmailSendRels = struct {
}{}

// emailSendR is where relationships are stored.
type emailSendR struct {
}

// NewStruct creates a new relationship struct
func (*emailSendR) NewStruct() *emailSendR {
	return &emailSendR{}
}

// emailSendL is where Load methods for each relationship are stored.
type emailSendL struct{}

var (
	emailSendColumns               = []string{"data_id", "user_id", "email_id", "email_type", "is_read", "is_del", "is_attach_receive", "get_time", "updated_at"}
	emailSendColumnsWithoutDefault = []string{}
	emailSendColumnsWithDefault    = []string{"data_id", "user_id", "email_id", "email_type", "is_read", "is_del", "is_attach_receive", "get_time", "updated_at"}
	emailSendPrimaryKeyColumns     = []string{"data_id"}
)

type (
	// EmailSendSlice is an alias for a slice of pointers to EmailSend.
	// This should generally be used opposed to []EmailSend.
	EmailSendSlice []*EmailSend

	emailSendQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	emailSendType                 = reflect.TypeOf(&EmailSend{})
	emailSendMapping              = queries.MakeStructMapping(emailSendType)
	emailSendPrimaryKeyMapping, _ = queries.BindMapping(emailSendType, emailSendMapping, emailSendPrimaryKeyColumns)
	emailSendInsertCacheMut       sync.RWMutex
	emailSendInsertCache          = make(map[string]insertCache)
	emailSendUpdateCacheMut       sync.RWMutex
	emailSendUpdateCache          = make(map[string]updateCache)
	emailSendUpsertCacheMut       sync.RWMutex
	emailSendUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single emailSend record from the query.
func (q emailSendQuery) One(exec boil.Executor) (*EmailSend, error) {
	o := &EmailSend{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for email_send")
	}

	return o, nil
}

// All returns all EmailSend records from the query.
func (q emailSendQuery) All(exec boil.Executor) (EmailSendSlice, error) {
	var o []*EmailSend

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EmailSend slice")
	}

	return o, nil
}

// Count returns the count of all EmailSend records in the query.
func (q emailSendQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count email_send rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q emailSendQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if email_send exists")
	}

	return count > 0, nil
}

// EmailSends retrieves all the records using an executor.
func EmailSends(mods ...qm.QueryMod) emailSendQuery {
	mods = append(mods, qm.From("`email_send`"))
	return emailSendQuery{NewQuery(mods...)}
}

// FindEmailSend retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmailSend(exec boil.Executor, dataID uint64, selectCols ...string) (*EmailSend, error) {
	emailSendObj := &EmailSend{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `email_send` where `data_id`=?", sel,
	)

	q := queries.Raw(query, dataID)

	err := q.Bind(nil, exec, emailSendObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from email_send")
	}

	return emailSendObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EmailSend) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no email_send provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(emailSendColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	emailSendInsertCacheMut.RLock()
	cache, cached := emailSendInsertCache[key]
	emailSendInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			emailSendColumns,
			emailSendColumnsWithDefault,
			emailSendColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(emailSendType, emailSendMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(emailSendType, emailSendMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `email_send` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `email_send` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `email_send` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, emailSendPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into email_send")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DataID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == emailSendMapping["DataID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DataID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for email_send")
	}

CacheNoHooks:
	if !cached {
		emailSendInsertCacheMut.Lock()
		emailSendInsertCache[key] = cache
		emailSendInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the EmailSend.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EmailSend) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	emailSendUpdateCacheMut.RLock()
	cache, cached := emailSendUpdateCache[key]
	emailSendUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			emailSendColumns,
			emailSendPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update email_send, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `email_send` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, emailSendPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(emailSendType, emailSendMapping, append(wl, emailSendPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update email_send row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for email_send")
	}

	if !cached {
		emailSendUpdateCacheMut.Lock()
		emailSendUpdateCache[key] = cache
		emailSendUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q emailSendQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for email_send")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for email_send")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmailSendSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailSendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `email_send` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailSendPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in emailSend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all emailSend")
	}
	return rowsAff, nil
}

var mySQLEmailSendUniqueColumns = []string{
	"data_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EmailSend) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no email_send provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(emailSendColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEmailSendUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	emailSendUpsertCacheMut.RLock()
	cache, cached := emailSendUpsertCache[key]
	emailSendUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			emailSendColumns,
			emailSendColumnsWithDefault,
			emailSendColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			emailSendColumns,
			emailSendPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert email_send, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "email_send", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `email_send` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(emailSendType, emailSendMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(emailSendType, emailSendMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for email_send")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DataID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == emailSendMapping["data_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(emailSendType, emailSendMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for email_send")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for email_send")
	}

CacheNoHooks:
	if !cached {
		emailSendUpsertCacheMut.Lock()
		emailSendUpsertCache[key] = cache
		emailSendUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single EmailSend record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EmailSend) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EmailSend provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), emailSendPrimaryKeyMapping)
	sql := "DELETE FROM `email_send` WHERE `data_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from email_send")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for email_send")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q emailSendQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no emailSendQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from email_send")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for email_send")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmailSendSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EmailSend slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailSendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `email_send` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailSendPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from emailSend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for email_send")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EmailSend) Reload(exec boil.Executor) error {
	ret, err := FindEmailSend(exec, o.DataID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailSendSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmailSendSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailSendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `email_send`.* FROM `email_send` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailSendPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmailSendSlice")
	}

	*o = slice

	return nil
}

// EmailSendExists checks if the EmailSend row exists.
func EmailSendExists(exec boil.Executor, dataID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `email_send` where `data_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, dataID)
	}

	row := exec.QueryRow(sql, dataID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if email_send exists")
	}

	return exists, nil
}
