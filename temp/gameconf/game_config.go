// Generated by github.com/davyxu/tabtoy
// Version: 2.8.9
// DO NOT EDIT!!
package gameconf

import (
	"fmt"
	"encoding/json"
	"io/ioutil"
)

// Defined in table: DoNotUseThis
type BoolTyp int32

const (

	// 否布尔类型
	BoolTyp_BOTNo BoolTyp = 0

	// 是
	BoolTyp_BOTYes BoolTyp = 1
)

var (
	BoolTypMapperValueByName = map[string]int32{
		"BOTNo":  0,
		"BOTYes": 1,
	}

	BoolTypMapperNameByValue = map[int32]string{
		0: "BOTNo",
		1: "BOTYes",
	}
)

func (self BoolTyp) String() string {
	name, _ := BoolTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ChoiceTyp int32

const (

	//选择类型
	ChoiceTyp_CHTDefault ChoiceTyp = 0

	// 否
	ChoiceTyp_CHTNo ChoiceTyp = 1

	// 是
	ChoiceTyp_CHTYes ChoiceTyp = 2
)

var (
	ChoiceTypMapperValueByName = map[string]int32{
		"CHTDefault": 0,
		"CHTNo":      1,
		"CHTYes":     2,
	}

	ChoiceTypMapperNameByValue = map[int32]string{
		0: "CHTDefault",
		1: "CHTNo",
		2: "CHTYes",
	}
)

func (self ChoiceTyp) String() string {
	name, _ := ChoiceTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type AccountLoginTyp int32

const (

	//账号登录类型
	AccountLoginTyp_ALTInvalid AccountLoginTyp = 0

	// 模拟器
	AccountLoginTyp_ALTSimulator AccountLoginTyp = 1

	// 游卡通行证
	AccountLoginTyp_ALTYoka AccountLoginTyp = 2

	AccountLoginTyp_ALTTencent AccountLoginTyp = 3

	AccountLoginTyp_ALTWechat AccountLoginTyp = 4
)

var (
	AccountLoginTypMapperValueByName = map[string]int32{
		"ALTInvalid":   0,
		"ALTSimulator": 1,
		"ALTYoka":      2,
		"ALTTencent":   3,
		"ALTWechat":    4,
	}

	AccountLoginTypMapperNameByValue = map[int32]string{
		0: "ALTInvalid",
		1: "ALTSimulator",
		2: "ALTYoka",
		3: "ALTTencent",
		4: "ALTWechat",
	}
)

func (self AccountLoginTyp) String() string {
	name, _ := AccountLoginTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type AccountStatusTyp int32

const (

	// 正常账号状态类型
	AccountStatusTyp_ASTNormal AccountStatusTyp = 0

	// 未激活
	AccountStatusTyp_ASTNonactivated AccountStatusTyp = 1

	// 锁定
	AccountStatusTyp_ASTLocking AccountStatusTyp = 2

	// 封号
	AccountStatusTyp_ASTBan AccountStatusTyp = 3
)

var (
	AccountStatusTypMapperValueByName = map[string]int32{
		"ASTNormal":       0,
		"ASTNonactivated": 1,
		"ASTLocking":      2,
		"ASTBan":          3,
	}

	AccountStatusTypMapperNameByValue = map[int32]string{
		0: "ASTNormal",
		1: "ASTNonactivated",
		2: "ASTLocking",
		3: "ASTBan",
	}
)

func (self AccountStatusTyp) String() string {
	name, _ := AccountStatusTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ClientDeviceTyp int32

const (

	//设备类型
	ClientDeviceTyp_CDTInvalid ClientDeviceTyp = 0

	// 模拟器
	ClientDeviceTyp_CDTSimulator ClientDeviceTyp = 1

	// 网页
	ClientDeviceTyp_CDTWeb ClientDeviceTyp = 2

	// 安卓
	ClientDeviceTyp_CDTAndroid ClientDeviceTyp = 3

	// IOS
	ClientDeviceTyp_CDTIOS ClientDeviceTyp = 4
)

var (
	ClientDeviceTypMapperValueByName = map[string]int32{
		"CDTInvalid":   0,
		"CDTSimulator": 1,
		"CDTWeb":       2,
		"CDTAndroid":   3,
		"CDTIOS":       4,
	}

	ClientDeviceTypMapperNameByValue = map[int32]string{
		0: "CDTInvalid",
		1: "CDTSimulator",
		2: "CDTWeb",
		3: "CDTAndroid",
		4: "CDTIOS",
	}
)

func (self ClientDeviceTyp) String() string {
	name, _ := ClientDeviceTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GenderTyp int32

const (

	//性别
	GenderTyp_SETInvalid GenderTyp = 0

	// 男
	GenderTyp_SETMale GenderTyp = 1

	// 女
	GenderTyp_SETFemale GenderTyp = 2

	// 第三性别
	GenderTyp_SETThird GenderTyp = 3
)

var (
	GenderTypMapperValueByName = map[string]int32{
		"SETInvalid": 0,
		"SETMale":    1,
		"SETFemale":  2,
		"SETThird":   3,
	}

	GenderTypMapperNameByValue = map[int32]string{
		0: "SETInvalid",
		1: "SETMale",
		2: "SETFemale",
		3: "SETThird",
	}
)

func (self GenderTyp) String() string {
	name, _ := GenderTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type CountryTyp int32

const (

	//国籍
	CountryTyp_KDTInvalid CountryTyp = 0

	// 魏国
	CountryTyp_KITWei CountryTyp = 1

	// 蜀国
	CountryTyp_KITSHu CountryTyp = 2

	// 吴国
	CountryTyp_KITWu CountryTyp = 3

	// 群雄
	CountryTyp_KITQun CountryTyp = 4

	// 神
	CountryTyp_KITShen CountryTyp = 5
)

var (
	CountryTypMapperValueByName = map[string]int32{
		"KDTInvalid": 0,
		"KITWei":     1,
		"KITSHu":     2,
		"KITWu":      3,
		"KITQun":     4,
		"KITShen":    5,
	}

	CountryTypMapperNameByValue = map[int32]string{
		0: "KDTInvalid",
		1: "KITWei",
		2: "KITSHu",
		3: "KITWu",
		4: "KITQun",
		5: "KITShen",
	}
)

func (self CountryTyp) String() string {
	name, _ := CountryTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type EquipmentTyp int32

const (

	//装备类型
	EquipmentTyp_EQTInvalid EquipmentTyp = 0

	// 坐骑
	EquipmentTyp_EQTMounts EquipmentTyp = 1

	// 武器
	EquipmentTyp_EQTWeapon EquipmentTyp = 2

	// 防具
	EquipmentTyp_EQTProtector EquipmentTyp = 3

	// 锦囊
	EquipmentTyp_EQTStrategy EquipmentTyp = 4
)

var (
	EquipmentTypMapperValueByName = map[string]int32{
		"EQTInvalid":   0,
		"EQTMounts":    1,
		"EQTWeapon":    2,
		"EQTProtector": 3,
		"EQTStrategy":  4,
	}

	EquipmentTypMapperNameByValue = map[int32]string{
		0: "EQTInvalid",
		1: "EQTMounts",
		2: "EQTWeapon",
		3: "EQTProtector",
		4: "EQTStrategy",
	}
)

func (self EquipmentTyp) String() string {
	name, _ := EquipmentTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type RuleTyp int32

const (

	//模式规则类型
	RuleTyp_RUTInvalid RuleTyp = 0

	// 身份规则主忠内反的基础规则
	RuleTyp_RUTShenFenGuiZe RuleTyp = 1

	// 国战
	RuleTyp_RUTGuoZhan RuleTyp = 2

	// 统帅三军普通3v3 统帅三军是2人控制的3v3
	RuleTyp_RUT3V3 RuleTyp = 3

	// 4v4排位排位赛
	RuleTyp_RUTPaiWei RuleTyp = 4

	// 欢乐规则欢乐2v2 3v3
	RuleTyp_RUTHappy RuleTyp = 5

	// 虎牢关虎牢关1v3
	RuleTyp_RUTHuLaoGuan RuleTyp = 6

	// 新1V1
	RuleTyp_RUTNew1V1 RuleTyp = 7

	// 怀旧1V1
	RuleTyp_RUT1V1 RuleTyp = 8

	// 无尽之战
	RuleTyp_RUTWuJinZhiZhan RuleTyp = 9

	// 武将列传
	RuleTyp_RUTWuJiangLieZhuan RuleTyp = 10

	// 活动规则
	RuleTyp_RUTActivity RuleTyp = 11
)

var (
	RuleTypMapperValueByName = map[string]int32{
		"RUTInvalid":         0,
		"RUTShenFenGuiZe":    1,
		"RUTGuoZhan":         2,
		"RUT3V3":             3,
		"RUTPaiWei":          4,
		"RUTHappy":           5,
		"RUTHuLaoGuan":       6,
		"RUTNew1V1":          7,
		"RUT1V1":             8,
		"RUTWuJinZhiZhan":    9,
		"RUTWuJiangLieZhuan": 10,
		"RUTActivity":        11,
	}

	RuleTypMapperNameByValue = map[int32]string{
		0:  "RUTInvalid",
		1:  "RUTShenFenGuiZe",
		2:  "RUTGuoZhan",
		3:  "RUT3V3",
		4:  "RUTPaiWei",
		5:  "RUTHappy",
		6:  "RUTHuLaoGuan",
		7:  "RUTNew1V1",
		8:  "RUT1V1",
		9:  "RUTWuJinZhiZhan",
		10: "RUTWuJiangLieZhuan",
		11: "RUTActivity",
	}
)

func (self RuleTyp) String() string {
	name, _ := RuleTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type DropItemTyp int32

const (

	//掉落类型
	DropItemTyp_DITInvalid DropItemTyp = 0

	// 道具
	DropItemTyp_DITItem DropItemTyp = 1

	// 掉落组
	DropItemTyp_DITDropGroup DropItemTyp = 2
)

var (
	DropItemTypMapperValueByName = map[string]int32{
		"DITInvalid":   0,
		"DITItem":      1,
		"DITDropGroup": 2,
	}

	DropItemTypMapperNameByValue = map[int32]string{
		0: "DITInvalid",
		1: "DITItem",
		2: "DITDropGroup",
	}
)

func (self DropItemTyp) String() string {
	name, _ := DropItemTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ItemTyp int32

const (

	//道具类型
	ItemTyp_ITTInvalid ItemTyp = 0

	// 商品
	ItemTyp_ITTGoods ItemTyp = 1

	// 货币
	ItemTyp_ITTCurrency ItemTyp = 2

	// 宝箱
	ItemTyp_ITTChest ItemTyp = 3

	// 武将
	ItemTyp_ITTGeneral ItemTyp = 4

	// 皮肤
	ItemTyp_ITTSkin ItemTyp = 5

	// 三国秀
	ItemTyp_ITTDress ItemTyp = 6

	// 点将卡
	ItemTyp_ITTDianJiang ItemTyp = 7

	// 手气卡
	ItemTyp_ITTShouQiKa ItemTyp = 8

	// 身份卡
	ItemTyp_ITTShenFenKa ItemTyp = 9

	// 换将卡
	ItemTyp_ITTHuanJiangKa ItemTyp = 10

	// 房间置顶卡
	ItemTyp_ITTTableTop ItemTyp = 11

	// 房间改名卡
	ItemTyp_ITTTableChangeName ItemTyp = 12

	// 诏令
	ItemTyp_ITTZhaoLing ItemTyp = 13

	// 招募令
	ItemTyp_ITTZhaoMuLing ItemTyp = 14

	// 将印
	ItemTyp_ITTGeneralSeal ItemTyp = 15

	// 改名卡
	ItemTyp_ITTNicknameChange ItemTyp = 16

	// 阴阳转换卡
	ItemTyp_ITTGenderChange ItemTyp = 17

	// 抵价券
	ItemTyp_ITTDiscountTicket ItemTyp = 18

	// 飞鸽
	ItemTyp_ITTFlyingDove ItemTyp = 19

	// 多多益善
	ItemTyp_ITTExperienceAddition ItemTyp = 20

	// 大表情
	ItemTyp_ITExpression ItemTyp = 21

	// VIP经验
	ItemTyp_ITTVIPExperience ItemTyp = 22

	// 活动
	ItemTyp_ITTActivity ItemTyp = 23

	// 求亲卡
	ItemTyp_ITTMarry ItemTyp = 24

	// 聚义令
	ItemTyp_ITTGuildCreate ItemTyp = 25

	// 职位令
	ItemTyp_ITTGuildRole ItemTyp = 26

	// 易名令
	ItemTyp_ITTGuildChangeName ItemTyp = 27

	// 个人经验
	ItemTyp_ITTUserExperience ItemTyp = 28

	// 公会经验
	ItemTyp_ITTGuildExperience ItemTyp = 29

	// 其他以后可以扩展
	ItemTyp_ITTOther ItemTyp = 1000
)

var (
	ItemTypMapperValueByName = map[string]int32{
		"ITTInvalid":            0,
		"ITTGoods":              1,
		"ITTCurrency":           2,
		"ITTChest":              3,
		"ITTGeneral":            4,
		"ITTSkin":               5,
		"ITTDress":              6,
		"ITTDianJiang":          7,
		"ITTShouQiKa":           8,
		"ITTShenFenKa":          9,
		"ITTHuanJiangKa":        10,
		"ITTTableTop":           11,
		"ITTTableChangeName":    12,
		"ITTZhaoLing":           13,
		"ITTZhaoMuLing":         14,
		"ITTGeneralSeal":        15,
		"ITTNicknameChange":     16,
		"ITTGenderChange":       17,
		"ITTDiscountTicket":     18,
		"ITTFlyingDove":         19,
		"ITTExperienceAddition": 20,
		"ITExpression":          21,
		"ITTVIPExperience":      22,
		"ITTActivity":           23,
		"ITTMarry":              24,
		"ITTGuildCreate":        25,
		"ITTGuildRole":          26,
		"ITTGuildChangeName":    27,
		"ITTUserExperience":     28,
		"ITTGuildExperience":    29,
		"ITTOther":              1000,
	}

	ItemTypMapperNameByValue = map[int32]string{
		0:    "ITTInvalid",
		1:    "ITTGoods",
		2:    "ITTCurrency",
		3:    "ITTChest",
		4:    "ITTGeneral",
		5:    "ITTSkin",
		6:    "ITTDress",
		7:    "ITTDianJiang",
		8:    "ITTShouQiKa",
		9:    "ITTShenFenKa",
		10:   "ITTHuanJiangKa",
		11:   "ITTTableTop",
		12:   "ITTTableChangeName",
		13:   "ITTZhaoLing",
		14:   "ITTZhaoMuLing",
		15:   "ITTGeneralSeal",
		16:   "ITTNicknameChange",
		17:   "ITTGenderChange",
		18:   "ITTDiscountTicket",
		19:   "ITTFlyingDove",
		20:   "ITTExperienceAddition",
		21:   "ITExpression",
		22:   "ITTVIPExperience",
		23:   "ITTActivity",
		24:   "ITTMarry",
		25:   "ITTGuildCreate",
		26:   "ITTGuildRole",
		27:   "ITTGuildChangeName",
		28:   "ITTUserExperience",
		29:   "ITTGuildExperience",
		1000: "ITTOther",
	}
)

func (self ItemTyp) String() string {
	name, _ := ItemTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type CurrencyTyp int32

const (

	//货币类型
	CurrencyTyp_CUTInvalid CurrencyTyp = 0

	// 通用元宝
	CurrencyTyp_CUTGold CurrencyTyp = 1

	// 绑定元宝
	CurrencyTyp_CUTGoldBinding CurrencyTyp = 2

	// 银两
	CurrencyTyp_CUTCoin CurrencyTyp = 3

	// 公会贡献
	CurrencyTyp_CUTGuildContribution CurrencyTyp = 4

	// 公会财富
	CurrencyTyp_CUTGuildMoney CurrencyTyp = 5

	// 朱砂
	CurrencyTyp_CUTCinnabar CurrencyTyp = 6

	// 灵气
	CurrencyTyp_CUTNimbus CurrencyTyp = 7

	// 恩师值
	CurrencyTyp_CUTMaster CurrencyTyp = 8

	// 活跃度
	CurrencyTyp_CUTActivity CurrencyTyp = 9
)

var (
	CurrencyTypMapperValueByName = map[string]int32{
		"CUTInvalid":           0,
		"CUTGold":              1,
		"CUTGoldBinding":       2,
		"CUTCoin":              3,
		"CUTGuildContribution": 4,
		"CUTGuildMoney":        5,
		"CUTCinnabar":          6,
		"CUTNimbus":            7,
		"CUTMaster":            8,
		"CUTActivity":          9,
	}

	CurrencyTypMapperNameByValue = map[int32]string{
		0: "CUTInvalid",
		1: "CUTGold",
		2: "CUTGoldBinding",
		3: "CUTCoin",
		4: "CUTGuildContribution",
		5: "CUTGuildMoney",
		6: "CUTCinnabar",
		7: "CUTNimbus",
		8: "CUTMaster",
		9: "CUTActivity",
	}
)

func (self CurrencyTyp) String() string {
	name, _ := CurrencyTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ShopTyp int32

const (

	//商城类型
	ShopTyp_SHTInvalid ShopTyp = 0

	// 秒杀
	ShopTyp_SHTSeckill ShopTyp = 1

	// 热卖
	ShopTyp_SHTHot ShopTyp = 2

	// 限时
	ShopTyp_SHTTimeLimit ShopTyp = 3

	// 武将
	ShopTyp_SHTGeneral ShopTyp = 4

	// 皮肤包
	ShopTyp_SHTSkinPack ShopTyp = 5

	// 皮肤
	ShopTyp_SHTSkin ShopTyp = 6

	// 灵气
	ShopTyp_SHTNimbus ShopTyp = 7

	// 其他道具
	ShopTyp_SHTOther ShopTyp = 8

	// 银两道具
	ShopTyp_SHTCoinItem ShopTyp = 9

	// 银两武将
	ShopTyp_SHTCoinGeneral ShopTyp = 10

	// 恩师商店
	ShopTyp_SHTMaster ShopTyp = 11

	// 公会贡献值
	ShopTyp_SHTGuildContribution ShopTyp = 12

	// 快捷购买
	ShopTyp_SHTQuickPurchase ShopTyp = 13

	// 公会财富
	ShopTyp_SHTGuildTreasure ShopTyp = 14
)

var (
	ShopTypMapperValueByName = map[string]int32{
		"SHTInvalid":           0,
		"SHTSeckill":           1,
		"SHTHot":               2,
		"SHTTimeLimit":         3,
		"SHTGeneral":           4,
		"SHTSkinPack":          5,
		"SHTSkin":              6,
		"SHTNimbus":            7,
		"SHTOther":             8,
		"SHTCoinItem":          9,
		"SHTCoinGeneral":       10,
		"SHTMaster":            11,
		"SHTGuildContribution": 12,
		"SHTQuickPurchase":     13,
		"SHTGuildTreasure":     14,
	}

	ShopTypMapperNameByValue = map[int32]string{
		0:  "SHTInvalid",
		1:  "SHTSeckill",
		2:  "SHTHot",
		3:  "SHTTimeLimit",
		4:  "SHTGeneral",
		5:  "SHTSkinPack",
		6:  "SHTSkin",
		7:  "SHTNimbus",
		8:  "SHTOther",
		9:  "SHTCoinItem",
		10: "SHTCoinGeneral",
		11: "SHTMaster",
		12: "SHTGuildContribution",
		13: "SHTQuickPurchase",
		14: "SHTGuildTreasure",
	}
)

func (self ShopTyp) String() string {
	name, _ := ShopTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type BuyLimitTyp int32

const (

	//限购类型
	BuyLimitTyp_BLTInvalid BuyLimitTyp = 0

	// 不限购
	BuyLimitTyp_BLTNone BuyLimitTyp = 1

	// 永久限购
	BuyLimitTyp_BLTForever BuyLimitTyp = 2

	// 时段重置限购
	BuyLimitTyp_BLTReset BuyLimitTyp = 3

	// 全服限购
	BuyLimitTyp_BLTGlobal BuyLimitTyp = 4
)

var (
	BuyLimitTypMapperValueByName = map[string]int32{
		"BLTInvalid": 0,
		"BLTNone":    1,
		"BLTForever": 2,
		"BLTReset":   3,
		"BLTGlobal":  4,
	}

	BuyLimitTypMapperNameByValue = map[int32]string{
		0: "BLTInvalid",
		1: "BLTNone",
		2: "BLTForever",
		3: "BLTReset",
		4: "BLTGlobal",
	}
)

func (self BuyLimitTyp) String() string {
	name, _ := BuyLimitTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type BuyLimitPeriodTyp int32

const (

	//限购设置类型
	BuyLimitPeriodTyp_BLPTInvalid BuyLimitPeriodTyp = 0

	// 每天限购
	BuyLimitPeriodTyp_BLPTDaily BuyLimitPeriodTyp = 1

	// 每周限购
	BuyLimitPeriodTyp_BLPTWeekly BuyLimitPeriodTyp = 2

	// 每月限购
	BuyLimitPeriodTyp_BLPTMonthly BuyLimitPeriodTyp = 3
)

var (
	BuyLimitPeriodTypMapperValueByName = map[string]int32{
		"BLPTInvalid": 0,
		"BLPTDaily":   1,
		"BLPTWeekly":  2,
		"BLPTMonthly": 3,
	}

	BuyLimitPeriodTypMapperNameByValue = map[int32]string{
		0: "BLPTInvalid",
		1: "BLPTDaily",
		2: "BLPTWeekly",
		3: "BLPTMonthly",
	}
)

func (self BuyLimitPeriodTyp) String() string {
	name, _ := BuyLimitPeriodTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ChestTyp int32

const (

	//宝箱类型
	ChestTyp_CHTInvalid ChestTyp = 0

	// 皮肤包
	ChestTyp_CHTSkinPack ChestTyp = 1

	// 制作装扮
	ChestTyp_CHTDress ChestTyp = 2

	// 普通宝箱
	ChestTyp_CHTCommon ChestTyp = 3

	// 将印宝箱
	ChestTyp_CHTGeneralSeal ChestTyp = 4
)

var (
	ChestTypMapperValueByName = map[string]int32{
		"CHTInvalid":     0,
		"CHTSkinPack":    1,
		"CHTDress":       2,
		"CHTCommon":      3,
		"CHTGeneralSeal": 4,
	}

	ChestTypMapperNameByValue = map[int32]string{
		0: "CHTInvalid",
		1: "CHTSkinPack",
		2: "CHTDress",
		3: "CHTCommon",
		4: "CHTGeneralSeal",
	}
)

func (self ChestTyp) String() string {
	name, _ := ChestTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ChestGradeTyp int32

const (

	//宝箱品质类型
	ChestGradeTyp_CGTInvalid ChestGradeTyp = 0

	// 普通
	ChestGradeTyp_CGTCommon ChestGradeTyp = 1

	// 稀有
	ChestGradeTyp_CGTRare ChestGradeTyp = 2

	// 史诗
	ChestGradeTyp_CGTEpic ChestGradeTyp = 3

	// 传说
	ChestGradeTyp_CGTLegend ChestGradeTyp = 4
)

var (
	ChestGradeTypMapperValueByName = map[string]int32{
		"CGTInvalid": 0,
		"CGTCommon":  1,
		"CGTRare":    2,
		"CGTEpic":    3,
		"CGTLegend":  4,
	}

	ChestGradeTypMapperNameByValue = map[int32]string{
		0: "CGTInvalid",
		1: "CGTCommon",
		2: "CGTRare",
		3: "CGTEpic",
		4: "CGTLegend",
	}
)

func (self ChestGradeTyp) String() string {
	name, _ := ChestGradeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type SkinGradeTyp int32

const (

	//皮肤品质类型
	SkinGradeTyp_SGTInvalid SkinGradeTyp = 0

	// 经典
	SkinGradeTyp_SGTClassical SkinGradeTyp = 1

	// 普通
	SkinGradeTyp_SGTCommon SkinGradeTyp = 2

	// 稀有
	SkinGradeTyp_SGTRare SkinGradeTyp = 3

	// 史诗
	SkinGradeTyp_SGTEpic SkinGradeTyp = 4

	// 传说
	SkinGradeTyp_SGTLegend SkinGradeTyp = 5

	// 限定
	SkinGradeTyp_SGTLimit SkinGradeTyp = 6

	// 传说动态
	SkinGradeTyp_SGTLimitDynamic SkinGradeTyp = 7

	// 限定动态
	SkinGradeTyp_SGTLegendDynamic SkinGradeTyp = 8
)

var (
	SkinGradeTypMapperValueByName = map[string]int32{
		"SGTInvalid":       0,
		"SGTClassical":     1,
		"SGTCommon":        2,
		"SGTRare":          3,
		"SGTEpic":          4,
		"SGTLegend":        5,
		"SGTLimit":         6,
		"SGTLimitDynamic":  7,
		"SGTLegendDynamic": 8,
	}

	SkinGradeTypMapperNameByValue = map[int32]string{
		0: "SGTInvalid",
		1: "SGTClassical",
		2: "SGTCommon",
		3: "SGTRare",
		4: "SGTEpic",
		5: "SGTLegend",
		6: "SGTLimit",
		7: "SGTLimitDynamic",
		8: "SGTLegendDynamic",
	}
)

func (self SkinGradeTyp) String() string {
	name, _ := SkinGradeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type DressTyp int32

const (

	//装扮类型
	DressTyp_DRTInvalid DressTyp = 0

	// 形象
	DressTyp_DRTAvatar DressTyp = 1

	// 边框
	DressTyp_DRTBorder DressTyp = 2

	// 背景
	DressTyp_DRTBackground DressTyp = 3

	// 饰品
	DressTyp_DRTDecoration DressTyp = 4
)

var (
	DressTypMapperValueByName = map[string]int32{
		"DRTInvalid":    0,
		"DRTAvatar":     1,
		"DRTBorder":     2,
		"DRTBackground": 3,
		"DRTDecoration": 4,
	}

	DressTypMapperNameByValue = map[int32]string{
		0: "DRTInvalid",
		1: "DRTAvatar",
		2: "DRTBorder",
		3: "DRTBackground",
		4: "DRTDecoration",
	}
)

func (self DressTyp) String() string {
	name, _ := DressTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type DressGradeTyp int32

const (

	//装扮品质类型
	DressGradeTyp_DGTInvalid DressGradeTyp = 0

	// 普通
	DressGradeTyp_DGTCommon DressGradeTyp = 1

	// 稀有
	DressGradeTyp_DGTRare DressGradeTyp = 2

	// 史诗
	DressGradeTyp_DGTEpic DressGradeTyp = 3

	// 传说
	DressGradeTyp_DGTLegend DressGradeTyp = 4
)

var (
	DressGradeTypMapperValueByName = map[string]int32{
		"DGTInvalid": 0,
		"DGTCommon":  1,
		"DGTRare":    2,
		"DGTEpic":    3,
		"DGTLegend":  4,
	}

	DressGradeTypMapperNameByValue = map[int32]string{
		0: "DGTInvalid",
		1: "DGTCommon",
		2: "DGTRare",
		3: "DGTEpic",
		4: "DGTLegend",
	}
)

func (self DressGradeTyp) String() string {
	name, _ := DressGradeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type DressComposeTyp int32

const (

	//装扮制作类型
	DressComposeTyp_DCTInvalid DressComposeTyp = 0

	// 普通制作
	DressComposeTyp_DCTNormal DressComposeTyp = 1

	// 高级制作
	DressComposeTyp_DCTSpecial DressComposeTyp = 2

	// 时限制作
	DressComposeTyp_DCTTimeLimit DressComposeTyp = 3
)

var (
	DressComposeTypMapperValueByName = map[string]int32{
		"DCTInvalid":   0,
		"DCTNormal":    1,
		"DCTSpecial":   2,
		"DCTTimeLimit": 3,
	}

	DressComposeTypMapperNameByValue = map[int32]string{
		0: "DCTInvalid",
		1: "DCTNormal",
		2: "DCTSpecial",
		3: "DCTTimeLimit",
	}
)

func (self DressComposeTyp) String() string {
	name, _ := DressComposeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GuildApplySetTyp int32

const (

	//公会申请验证方式
	GuildApplySetTyp_GASTInvalid GuildApplySetTyp = 0

	// 自动通过
	GuildApplySetTyp_GASTAutoAccept GuildApplySetTyp = 1

	// 需要验证
	GuildApplySetTyp_GASTValidate GuildApplySetTyp = 2
)

var (
	GuildApplySetTypMapperValueByName = map[string]int32{
		"GASTInvalid":    0,
		"GASTAutoAccept": 1,
		"GASTValidate":   2,
	}

	GuildApplySetTypMapperNameByValue = map[int32]string{
		0: "GASTInvalid",
		1: "GASTAutoAccept",
		2: "GASTValidate",
	}
)

func (self GuildApplySetTyp) String() string {
	name, _ := GuildApplySetTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GuildRoleTyp int32

const (

	//公会职位类型
	GuildRoleTyp_GROTInvalid GuildRoleTyp = 0

	// 会长
	GuildRoleTyp_GROTChairman GuildRoleTyp = 1

	// 副会长
	GuildRoleTyp_GROTViceChairman GuildRoleTyp = 2

	// 成员
	GuildRoleTyp_GROTMember GuildRoleTyp = 3
)

var (
	GuildRoleTypMapperValueByName = map[string]int32{
		"GROTInvalid":      0,
		"GROTChairman":     1,
		"GROTViceChairman": 2,
		"GROTMember":       3,
	}

	GuildRoleTypMapperNameByValue = map[int32]string{
		0: "GROTInvalid",
		1: "GROTChairman",
		2: "GROTViceChairman",
		3: "GROTMember",
	}
)

func (self GuildRoleTyp) String() string {
	name, _ := GuildRoleTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GuildLogTyp int32

const (

	//公会日志类型
	GuildLogTyp_GLTInvalid GuildLogTyp = 0

	// 创建公会
	GuildLogTyp_GLTCreate GuildLogTyp = 1

	// 加入公会
	GuildLogTyp_GLTJoin GuildLogTyp = 2

	// 离开公会
	GuildLogTyp_GLTLeave GuildLogTyp = 3

	// 被提出公会
	GuildLogTyp_GLTBeKicked GuildLogTyp = 4

	// 公会升级
	GuildLogTyp_GLTUpgrade GuildLogTyp = 5

	// 转让会长
	GuildLogTyp_GLTTransferChairman GuildLogTyp = 6

	// 任命会长
	GuildLogTyp_GLTAppointAsChairman GuildLogTyp = 7

	// 任命副会长
	GuildLogTyp_GLTAppointAsViceChairman GuildLogTyp = 8

	// 撤除副会长
	GuildLogTyp_GLTRemoveViceChairman GuildLogTyp = 9

	// 弹劾发起
	GuildLogTyp_GLTImpeach GuildLogTyp = 10

	// 弹劾失败
	GuildLogTyp_GLTImpeachFailure GuildLogTyp = 11

	// 弹劾成功
	GuildLogTyp_GLTImpeachSuccess GuildLogTyp = 12

	// 修改公告
	GuildLogTyp_GLTEditManifesto GuildLogTyp = 13

	// 修改宣言
	GuildLogTyp_GLTEditAnnouncement GuildLogTyp = 14

	// 修改公会名称
	GuildLogTyp_GLTChangeName GuildLogTyp = 15

	// 修改公会旗帜
	GuildLogTyp_GLTChangeFlag GuildLogTyp = 16

	// 修改公会申请验证方式
	GuildLogTyp_GLTChangeApplySetType GuildLogTyp = 17

	// 公会争霸战报名成功
	GuildLogTyp_GLTBattleSignUpSuccess GuildLogTyp = 18

	// 对阵对手确定
	GuildLogTyp_GLTBattleOpponent GuildLogTyp = 19

	// 公会争霸战结果
	GuildLogTyp_GLTBattleResult GuildLogTyp = 20

	// 排名情况
	GuildLogTyp_GLTBattleRank GuildLogTyp = 21

	// 解散公会
	GuildLogTyp_GLTDismiss GuildLogTyp = 22

	// 撤销解散公会
	GuildLogTyp_GLTDismissCancel GuildLogTyp = 23
)

var (
	GuildLogTypMapperValueByName = map[string]int32{
		"GLTInvalid":               0,
		"GLTCreate":                1,
		"GLTJoin":                  2,
		"GLTLeave":                 3,
		"GLTBeKicked":              4,
		"GLTUpgrade":               5,
		"GLTTransferChairman":      6,
		"GLTAppointAsChairman":     7,
		"GLTAppointAsViceChairman": 8,
		"GLTRemoveViceChairman":    9,
		"GLTImpeach":               10,
		"GLTImpeachFailure":        11,
		"GLTImpeachSuccess":        12,
		"GLTEditManifesto":         13,
		"GLTEditAnnouncement":      14,
		"GLTChangeName":            15,
		"GLTChangeFlag":            16,
		"GLTChangeApplySetType":    17,
		"GLTBattleSignUpSuccess":   18,
		"GLTBattleOpponent":        19,
		"GLTBattleResult":          20,
		"GLTBattleRank":            21,
		"GLTDismiss":               22,
		"GLTDismissCancel":         23,
	}

	GuildLogTypMapperNameByValue = map[int32]string{
		0:  "GLTInvalid",
		1:  "GLTCreate",
		2:  "GLTJoin",
		3:  "GLTLeave",
		4:  "GLTBeKicked",
		5:  "GLTUpgrade",
		6:  "GLTTransferChairman",
		7:  "GLTAppointAsChairman",
		8:  "GLTAppointAsViceChairman",
		9:  "GLTRemoveViceChairman",
		10: "GLTImpeach",
		11: "GLTImpeachFailure",
		12: "GLTImpeachSuccess",
		13: "GLTEditManifesto",
		14: "GLTEditAnnouncement",
		15: "GLTChangeName",
		16: "GLTChangeFlag",
		17: "GLTChangeApplySetType",
		18: "GLTBattleSignUpSuccess",
		19: "GLTBattleOpponent",
		20: "GLTBattleResult",
		21: "GLTBattleRank",
		22: "GLTDismiss",
		23: "GLTDismissCancel",
	}
)

func (self GuildLogTyp) String() string {
	name, _ := GuildLogTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type OtherGradeTyp int32

const (

	//其他品质类型
	OtherGradeTyp_OGTInvalid OtherGradeTyp = 0

	// 普通
	OtherGradeTyp_OGTCommon OtherGradeTyp = 1

	// 稀有
	OtherGradeTyp_OGTRare OtherGradeTyp = 2

	// 史诗
	OtherGradeTyp_OGTEpic OtherGradeTyp = 3

	// 传说
	OtherGradeTyp_OGTLegend OtherGradeTyp = 4
)

var (
	OtherGradeTypMapperValueByName = map[string]int32{
		"OGTInvalid": 0,
		"OGTCommon":  1,
		"OGTRare":    2,
		"OGTEpic":    3,
		"OGTLegend":  4,
	}

	OtherGradeTypMapperNameByValue = map[int32]string{
		0: "OGTInvalid",
		1: "OGTCommon",
		2: "OGTRare",
		3: "OGTEpic",
		4: "OGTLegend",
	}
)

func (self OtherGradeTyp) String() string {
	name, _ := OtherGradeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ModeTyp int32

const (

	//模式类型
	ModeTyp_MTInvalid ModeTyp = 0

	// 单局
	ModeTyp_MTOnceGame ModeTyp = 1

	// 连续闯关
	ModeTyp_MTContinuousGame ModeTyp = 2

	// 中断闯关
	ModeTyp_MTInterruptGame ModeTyp = 3
)

var (
	ModeTypMapperValueByName = map[string]int32{
		"MTInvalid":        0,
		"MTOnceGame":       1,
		"MTContinuousGame": 2,
		"MTInterruptGame":  3,
	}

	ModeTypMapperNameByValue = map[int32]string{
		0: "MTInvalid",
		1: "MTOnceGame",
		2: "MTContinuousGame",
		3: "MTInterruptGame",
	}
)

func (self ModeTyp) String() string {
	name, _ := ModeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ChooseGeneralTyp int32

const (

	//选将模式
	ChooseGeneralTyp_CHGTInvalid ChooseGeneralTyp = 0

	// 默认选将
	ChooseGeneralTyp_CHGTDefault ChooseGeneralTyp = 1

	// 特殊选将
	ChooseGeneralTyp_CHGTSpecial ChooseGeneralTyp = 2
)

var (
	ChooseGeneralTypMapperValueByName = map[string]int32{
		"CHGTInvalid": 0,
		"CHGTDefault": 1,
		"CHGTSpecial": 2,
	}

	ChooseGeneralTypMapperNameByValue = map[int32]string{
		0: "CHGTInvalid",
		1: "CHGTDefault",
		2: "CHGTSpecial",
	}
)

func (self ChooseGeneralTyp) String() string {
	name, _ := ChooseGeneralTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type LookOnSetTyp int32

const (

	//旁观设置
	LookOnSetTyp_LOSTInvalid LookOnSetTyp = 0

	// 支持旁观且玩家可以设置
	LookOnSetTyp_LOSTAllowAndSet LookOnSetTyp = 1

	// 支持旁观且玩家不可以设置
	LookOnSetTyp_LOSTAllowAndNoSet LookOnSetTyp = 2

	// 禁止旁观
	LookOnSetTyp_LOSTForbid LookOnSetTyp = 3
)

var (
	LookOnSetTypMapperValueByName = map[string]int32{
		"LOSTInvalid":       0,
		"LOSTAllowAndSet":   1,
		"LOSTAllowAndNoSet": 2,
		"LOSTForbid":        3,
	}

	LookOnSetTypMapperNameByValue = map[int32]string{
		0: "LOSTInvalid",
		1: "LOSTAllowAndSet",
		2: "LOSTAllowAndNoSet",
		3: "LOSTForbid",
	}
)

func (self LookOnSetTyp) String() string {
	name, _ := LookOnSetTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type CardTyp int32

const (

	//牌堆类型
	CardTyp_CTInvalid CardTyp = 0

	// 随机牌堆
	CardTyp_CTRadom CardTyp = 1

	// 首轮固定牌堆
	CardTyp_CTFirstRoundFixation CardTyp = 2
)

var (
	CardTypMapperValueByName = map[string]int32{
		"CTInvalid":            0,
		"CTRadom":              1,
		"CTFirstRoundFixation": 2,
	}

	CardTypMapperNameByValue = map[int32]string{
		0: "CTInvalid",
		1: "CTRadom",
		2: "CTFirstRoundFixation",
	}
)

func (self CardTyp) String() string {
	name, _ := CardTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type RewardTyp int32

const (

	//奖励类型
	RewardTyp_RETInvalid RewardTyp = 0

	// 宝箱奖励
	RewardTyp_RETBox RewardTyp = 1

	// 固定道具奖励
	RewardTyp_RETFixation RewardTyp = 2

	// 特殊奖励
	RewardTyp_RETSpecial RewardTyp = 3
)

var (
	RewardTypMapperValueByName = map[string]int32{
		"RETInvalid":  0,
		"RETBox":      1,
		"RETFixation": 2,
		"RETSpecial":  3,
	}

	RewardTypMapperNameByValue = map[int32]string{
		0: "RETInvalid",
		1: "RETBox",
		2: "RETFixation",
		3: "RETSpecial",
	}
)

func (self RewardTyp) String() string {
	name, _ := RewardTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type SettleAccountsTyp int32

const (

	//结算状态
	SettleAccountsTyp_SATInvalid SettleAccountsTyp = 0

	// 胜利
	SettleAccountsTyp_SATWin SettleAccountsTyp = 1

	// 失败
	SettleAccountsTyp_SATLose SettleAccountsTyp = 2

	// 平局
	SettleAccountsTyp_SATDraw SettleAccountsTyp = 3

	// 逃跑
	SettleAccountsTyp_SATEscape SettleAccountsTyp = 4
)

var (
	SettleAccountsTypMapperValueByName = map[string]int32{
		"SATInvalid": 0,
		"SATWin":     1,
		"SATLose":    2,
		"SATDraw":    3,
		"SATEscape":  4,
	}

	SettleAccountsTypMapperNameByValue = map[int32]string{
		0: "SATInvalid",
		1: "SATWin",
		2: "SATLose",
		3: "SATDraw",
		4: "SATEscape",
	}
)

func (self SettleAccountsTyp) String() string {
	name, _ := SettleAccountsTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type MatchTyp int32

const (

	//匹配类型
	MatchTyp_MATInvaild MatchTyp = 0

	// 快速加入
	MatchTyp_MATQuickJoin MatchTyp = 1

	// 单人身份局天梯
	MatchTyp_MATSingleIdentity MatchTyp = 2

	// 组队欢乐成双天梯
	MatchTyp_MATTeamDoubleJoy MatchTyp = 3

	// 单人欢乐成双天梯
	MatchTyp_MATSingleDoubleJoy MatchTyp = 4
)

var (
	MatchTypMapperValueByName = map[string]int32{
		"MATInvaild":         0,
		"MATQuickJoin":       1,
		"MATSingleIdentity":  2,
		"MATTeamDoubleJoy":   3,
		"MATSingleDoubleJoy": 4,
	}

	MatchTypMapperNameByValue = map[int32]string{
		0: "MATInvaild",
		1: "MATQuickJoin",
		2: "MATSingleIdentity",
		3: "MATTeamDoubleJoy",
		4: "MATSingleDoubleJoy",
	}
)

func (self MatchTyp) String() string {
	name, _ := MatchTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type BirthdayCityViewTyp int32

const (

	//生日和城市查看类型
	BirthdayCityViewTyp_BCVTInvalid BirthdayCityViewTyp = 0

	// 所有人可见
	BirthdayCityViewTyp_BCVTAll BirthdayCityViewTyp = 1

	// 仅好友可见
	BirthdayCityViewTyp_BCVTFriendOnly BirthdayCityViewTyp = 2
)

var (
	BirthdayCityViewTypMapperValueByName = map[string]int32{
		"BCVTInvalid":    0,
		"BCVTAll":        1,
		"BCVTFriendOnly": 2,
	}

	BirthdayCityViewTypMapperNameByValue = map[int32]string{
		0: "BCVTInvalid",
		1: "BCVTAll",
		2: "BCVTFriendOnly",
	}
)

func (self BirthdayCityViewTyp) String() string {
	name, _ := BirthdayCityViewTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type FriendValidateTyp int32

const (

	//好友验证方式类型
	FriendValidateTyp_FVTInvaild FriendValidateTyp = 0

	// 好友申请需要验证
	FriendValidateTyp_FVTValidate FriendValidateTyp = 1

	// 好友申请不需要验证
	FriendValidateTyp_FVTAccept FriendValidateTyp = 2

	// 不接受任何好友申请
	FriendValidateTyp_FVTReject FriendValidateTyp = 3
)

var (
	FriendValidateTypMapperValueByName = map[string]int32{
		"FVTInvaild":  0,
		"FVTValidate": 1,
		"FVTAccept":   2,
		"FVTReject":   3,
	}

	FriendValidateTypMapperNameByValue = map[int32]string{
		0: "FVTInvaild",
		1: "FVTValidate",
		2: "FVTAccept",
		3: "FVTReject",
	}
)

func (self FriendValidateTyp) String() string {
	name, _ := FriendValidateTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type InviteTyp int32

const (

	//邀请设置类型
	InviteTyp_INTInvaild InviteTyp = 0

	// 接受任何人邀请
	InviteTyp_INTAnybody InviteTyp = 1

	// 只接受公会和好友邀请
	InviteTyp_INTFriendAndGuildOnly InviteTyp = 2

	// 只接受好友邀请
	InviteTyp_INTFriendOnly InviteTyp = 3

	// 不接受任何邀请
	InviteTyp_INTNone InviteTyp = 4
)

var (
	InviteTypMapperValueByName = map[string]int32{
		"INTInvaild":            0,
		"INTAnybody":            1,
		"INTFriendAndGuildOnly": 2,
		"INTFriendOnly":         3,
		"INTNone":               4,
	}

	InviteTypMapperNameByValue = map[int32]string{
		0: "INTInvaild",
		1: "INTAnybody",
		2: "INTFriendAndGuildOnly",
		3: "INTFriendOnly",
		4: "INTNone",
	}
)

func (self InviteTyp) String() string {
	name, _ := InviteTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ObserveTyp int32

const (

	//旁观设置类型
	ObserveTyp_OBTInvaild ObserveTyp = 0

	// 公会和好友旁观时可见手牌
	ObserveTyp_OBTFriendAndGuildOnly ObserveTyp = 1

	// 任何人旁观时可见手牌
	ObserveTyp_OBTAnybody ObserveTyp = 2

	// 任何人都不可见手牌
	ObserveTyp_OBTNone ObserveTyp = 3
)

var (
	ObserveTypMapperValueByName = map[string]int32{
		"OBTInvaild":            0,
		"OBTFriendAndGuildOnly": 1,
		"OBTAnybody":            2,
		"OBTNone":               3,
	}

	ObserveTypMapperNameByValue = map[int32]string{
		0: "OBTInvaild",
		1: "OBTFriendAndGuildOnly",
		2: "OBTAnybody",
		3: "OBTNone",
	}
)

func (self ObserveTyp) String() string {
	name, _ := ObserveTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ScreenTyp int32

const (

	//PC端游戏尺寸类型
	ScreenTyp_SCTInvaild ScreenTyp = 0

	// 自动适配
	ScreenTyp_SCTAuto ScreenTyp = 1

	// 标准尺寸
	ScreenTyp_SCTAtandard ScreenTyp = 2

	// 填充尺寸
	ScreenTyp_SCTPadding ScreenTyp = 3
)

var (
	ScreenTypMapperValueByName = map[string]int32{
		"SCTInvaild":  0,
		"SCTAuto":     1,
		"SCTAtandard": 2,
		"SCTPadding":  3,
	}

	ScreenTypMapperNameByValue = map[int32]string{
		0: "SCTInvaild",
		1: "SCTAuto",
		2: "SCTAtandard",
		3: "SCTPadding",
	}
)

func (self ScreenTyp) String() string {
	name, _ := ScreenTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type BGMTyp int32

const (

	//背景音乐设置类型
	BGMTyp_BGMTInvaild BGMTyp = 0

	// 默认
	BGMTyp_BGMDefault BGMTyp = 1

	// 随机
	BGMTyp_BGMRandom BGMTyp = 2

	// 貂蝉
	BGMTyp_BGMDiaoChan BGMTyp = 3

	// 千里走单骑
	BGMTyp_BGMQianLiZouDanJi BGMTyp = 4

	// 舌战群儒
	BGMTyp_BGMSheZhanQunRu BGMTyp = 5
)

var (
	BGMTypMapperValueByName = map[string]int32{
		"BGMTInvaild":       0,
		"BGMDefault":        1,
		"BGMRandom":         2,
		"BGMDiaoChan":       3,
		"BGMQianLiZouDanJi": 4,
		"BGMSheZhanQunRu":   5,
	}

	BGMTypMapperNameByValue = map[int32]string{
		0: "BGMTInvaild",
		1: "BGMDefault",
		2: "BGMRandom",
		3: "BGMDiaoChan",
		4: "BGMQianLiZouDanJi",
		5: "BGMSheZhanQunRu",
	}
)

func (self BGMTyp) String() string {
	name, _ := BGMTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type TableStatusTyp int32

const (

	//房间状态类型
	TableStatusTyp_TSTInvaild TableStatusTyp = 0

	// 等待中
	TableStatusTyp_TSTWaiting TableStatusTyp = 1

	// 游戏中
	TableStatusTyp_TSTInTheGaming TableStatusTyp = 2
)

var (
	TableStatusTypMapperValueByName = map[string]int32{
		"TSTInvaild":     0,
		"TSTWaiting":     1,
		"TSTInTheGaming": 2,
	}

	TableStatusTypMapperNameByValue = map[int32]string{
		0: "TSTInvaild",
		1: "TSTWaiting",
		2: "TSTInTheGaming",
	}
)

func (self TableStatusTyp) String() string {
	name, _ := TableStatusTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ChatChannelTyp int32

const (

	//聊天频道类型
	ChatChannelTyp_CCTInvalid ChatChannelTyp = 0

	// 系统
	ChatChannelTyp_CCTSystem ChatChannelTyp = 1

	// 世界
	ChatChannelTyp_CCTWorld ChatChannelTyp = 2

	// 公会
	ChatChannelTyp_CCTGuild ChatChannelTyp = 3

	// 房间
	ChatChannelTyp_CCTRoom ChatChannelTyp = 4

	// 私聊
	ChatChannelTyp_CCTPrivate ChatChannelTyp = 5

	// GM
	ChatChannelTyp_CCTGM ChatChannelTyp = 6
)

var (
	ChatChannelTypMapperValueByName = map[string]int32{
		"CCTInvalid": 0,
		"CCTSystem":  1,
		"CCTWorld":   2,
		"CCTGuild":   3,
		"CCTRoom":    4,
		"CCTPrivate": 5,
		"CCTGM":      6,
	}

	ChatChannelTypMapperNameByValue = map[int32]string{
		0: "CCTInvalid",
		1: "CCTSystem",
		2: "CCTWorld",
		3: "CCTGuild",
		4: "CCTRoom",
		5: "CCTPrivate",
		6: "CCTGM",
	}
)

func (self ChatChannelTyp) String() string {
	name, _ := ChatChannelTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ChatMessageTyp int32

const (

	//聊天消息类型
	ChatMessageTyp_CMTInvalid ChatMessageTyp = 0

	// 聊天消息
	ChatMessageTyp_CMTChatMessage ChatMessageTyp = 1

	// 获得新邮件
	ChatMessageTyp_CMTEmailNew ChatMessageTyp = 2

	// 道具获得
	ChatMessageTyp_CMTItemGet ChatMessageTyp = 3

	// 社交关系申请
	ChatMessageTyp_CMTSocialRelationApply ChatMessageTyp = 4

	// 社交关系通过
	ChatMessageTyp_CMTSocialRelationAccept ChatMessageTyp = 5

	// 进入排行榜
	ChatMessageTyp_CMTRankingListEnter ChatMessageTyp = 6

	// 诏令
	ChatMessageTyp_CMTRescript ChatMessageTyp = 7

	// 公会成立
	ChatMessageTyp_CMTGuildCreate ChatMessageTyp = 8

	// 公会招募
	ChatMessageTyp_CMTGuildRecruit ChatMessageTyp = 9

	// 公会升级
	ChatMessageTyp_CMTGuildLevelUp ChatMessageTyp = 10

	// 公会守护兽升级
	ChatMessageTyp_CMTGuildGuardianBeastLevelUp ChatMessageTyp = 11

	// 公会争霸战报名
	ChatMessageTyp_CMTGuildBattleSign ChatMessageTyp = 12

	// 牌局结算
	ChatMessageTyp_CMTBattleResult ChatMessageTyp = 13

	// 大表情
	ChatMessageTyp_CMTExpression ChatMessageTyp = 14
)

var (
	ChatMessageTypMapperValueByName = map[string]int32{
		"CMTInvalid":                   0,
		"CMTChatMessage":               1,
		"CMTEmailNew":                  2,
		"CMTItemGet":                   3,
		"CMTSocialRelationApply":       4,
		"CMTSocialRelationAccept":      5,
		"CMTRankingListEnter":          6,
		"CMTRescript":                  7,
		"CMTGuildCreate":               8,
		"CMTGuildRecruit":              9,
		"CMTGuildLevelUp":              10,
		"CMTGuildGuardianBeastLevelUp": 11,
		"CMTGuildBattleSign":           12,
		"CMTBattleResult":              13,
		"CMTExpression":                14,
	}

	ChatMessageTypMapperNameByValue = map[int32]string{
		0:  "CMTInvalid",
		1:  "CMTChatMessage",
		2:  "CMTEmailNew",
		3:  "CMTItemGet",
		4:  "CMTSocialRelationApply",
		5:  "CMTSocialRelationAccept",
		6:  "CMTRankingListEnter",
		7:  "CMTRescript",
		8:  "CMTGuildCreate",
		9:  "CMTGuildRecruit",
		10: "CMTGuildLevelUp",
		11: "CMTGuildGuardianBeastLevelUp",
		12: "CMTGuildBattleSign",
		13: "CMTBattleResult",
		14: "CMTExpression",
	}
)

func (self ChatMessageTyp) String() string {
	name, _ := ChatMessageTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type RankingListTyp int32

const (

	//排行榜类型
	RankingListTyp_RLTInvalid RankingListTyp = 0

	// 皮肤
	RankingListTyp_RLTSkin RankingListTyp = 1

	// 三国秀
	RankingListTyp_RLTDress RankingListTyp = 2

	// 武将等阶
	RankingListTyp_RLTGeneralGradation RankingListTyp = 3

	// 战功
	RankingListTyp_RLTAchievement RankingListTyp = 4

	// 竞技
	RankingListTyp_RLTArena RankingListTyp = 5
)

var (
	RankingListTypMapperValueByName = map[string]int32{
		"RLTInvalid":          0,
		"RLTSkin":             1,
		"RLTDress":            2,
		"RLTGeneralGradation": 3,
		"RLTAchievement":      4,
		"RLTArena":            5,
	}

	RankingListTypMapperNameByValue = map[int32]string{
		0: "RLTInvalid",
		1: "RLTSkin",
		2: "RLTDress",
		3: "RLTGeneralGradation",
		4: "RLTAchievement",
		5: "RLTArena",
	}
)

func (self RankingListTyp) String() string {
	name, _ := RankingListTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type RankingListRangeTyp int32

const (

	//排行榜范围类型
	RankingListRangeTyp_RLRTInvalid RankingListRangeTyp = 0

	// 总榜
	RankingListRangeTyp_RLRTTotal RankingListRangeTyp = 1

	// 周榜
	RankingListRangeTyp_RLRTWeekly RankingListRangeTyp = 2
)

var (
	RankingListRangeTypMapperValueByName = map[string]int32{
		"RLRTInvalid": 0,
		"RLRTTotal":   1,
		"RLRTWeekly":  2,
	}

	RankingListRangeTypMapperNameByValue = map[int32]string{
		0: "RLRTInvalid",
		1: "RLRTTotal",
		2: "RLRTWeekly",
	}
)

func (self RankingListRangeTyp) String() string {
	name, _ := RankingListRangeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type TaskBaseTyp int32

const (

	//任务基础类型
	TaskBaseTyp_TBTInvalid TaskBaseTyp = 0

	// 日常任务
	TaskBaseTyp_TBTEveryday TaskBaseTyp = 1

	// 七日任务
	TaskBaseTyp_TBTSevenDays TaskBaseTyp = 2

	// 主线任务
	TaskBaseTyp_TBTMainQuest TaskBaseTyp = 3

	// 活动任务
	TaskBaseTyp_TBTActivity TaskBaseTyp = 4

	// 公会任务
	TaskBaseTyp_TBTGuild TaskBaseTyp = 5

	// 师徒任务
	TaskBaseTyp_TBTMasterAndApprentice TaskBaseTyp = 6

	// 活跃任务
	TaskBaseTyp_TBTActive TaskBaseTyp = 7

	// VIP奖励任务
	TaskBaseTyp_TBTVipReward TaskBaseTyp = 8

	// VIP经验任务
	TaskBaseTyp_TBTVipExperience TaskBaseTyp = 9
)

var (
	TaskBaseTypMapperValueByName = map[string]int32{
		"TBTInvalid":             0,
		"TBTEveryday":            1,
		"TBTSevenDays":           2,
		"TBTMainQuest":           3,
		"TBTActivity":            4,
		"TBTGuild":               5,
		"TBTMasterAndApprentice": 6,
		"TBTActive":              7,
		"TBTVipReward":           8,
		"TBTVipExperience":       9,
	}

	TaskBaseTypMapperNameByValue = map[int32]string{
		0: "TBTInvalid",
		1: "TBTEveryday",
		2: "TBTSevenDays",
		3: "TBTMainQuest",
		4: "TBTActivity",
		5: "TBTGuild",
		6: "TBTMasterAndApprentice",
		7: "TBTActive",
		8: "TBTVipReward",
		9: "TBTVipExperience",
	}
)

func (self TaskBaseTyp) String() string {
	name, _ := TaskBaseTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type TaskAcceptTyp int32

const (

	//任务接受类型
	TaskAcceptTyp_TATInvalid TaskAcceptTyp = 0

	// 自动接受
	TaskAcceptTyp_TATSelfMotion TaskAcceptTyp = 1

	// 主动接受
	TaskAcceptTyp_TATInitiative TaskAcceptTyp = 2
)

var (
	TaskAcceptTypMapperValueByName = map[string]int32{
		"TATInvalid":    0,
		"TATSelfMotion": 1,
		"TATInitiative": 2,
	}

	TaskAcceptTypMapperNameByValue = map[int32]string{
		0: "TATInvalid",
		1: "TATSelfMotion",
		2: "TATInitiative",
	}
)

func (self TaskAcceptTyp) String() string {
	name, _ := TaskAcceptTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type TaskResetTyp int32

const (
	TaskResetTyp_TRTInvalid TaskResetTyp = 0

	// 每日重置
	TaskResetTyp_TRTEveryday TaskResetTyp = 1

	// 接受后30天重置
	TaskResetTyp_TRTAcceptThirtyDays TaskResetTyp = 2

	// 领取后立即重置
	TaskResetTyp_TRTGetReward TaskResetTyp = 3

	// 领取后不重置
	TaskResetTyp_TRTGetRewardDoNotReset TaskResetTyp = 4
)

var (
	TaskResetTypMapperValueByName = map[string]int32{
		"TRTInvalid":             0,
		"TRTEveryday":            1,
		"TRTAcceptThirtyDays":    2,
		"TRTGetReward":           3,
		"TRTGetRewardDoNotReset": 4,
	}

	TaskResetTypMapperNameByValue = map[int32]string{
		0: "TRTInvalid",
		1: "TRTEveryday",
		2: "TRTAcceptThirtyDays",
		3: "TRTGetReward",
		4: "TRTGetRewardDoNotReset",
	}
)

func (self TaskResetTyp) String() string {
	name, _ := TaskResetTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type TaskFinishTyp int32

const (

	//任务条件完成类型
	TaskFinishTyp_TFTInvalid TaskFinishTyp = 0

	// 完成全部
	TaskFinishTyp_TFTFinishAll TaskFinishTyp = 1

	// 完成任意
	TaskFinishTyp_TFTAtWill TaskFinishTyp = 2
)

var (
	TaskFinishTypMapperValueByName = map[string]int32{
		"TFTInvalid":   0,
		"TFTFinishAll": 1,
		"TFTAtWill":    2,
	}

	TaskFinishTypMapperNameByValue = map[int32]string{
		0: "TFTInvalid",
		1: "TFTFinishAll",
		2: "TFTAtWill",
	}
)

func (self TaskFinishTyp) String() string {
	name, _ := TaskFinishTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type TaskStageTyp int32

const (

	//任务阶段类型
	TaskStageTyp_TKSTInvalid TaskStageTyp = 0

	// 未接受
	TaskStageTyp_TKSTUnAccept TaskStageTyp = 1

	// 接受未完成
	TaskStageTyp_TKSTUnFinished TaskStageTyp = 2

	// 接受已完成未领取
	TaskStageTyp_TKSTUnReceived TaskStageTyp = 3

	// 已完成已领取
	TaskStageTyp_TKSTAlreadyReceived TaskStageTyp = 4
)

var (
	TaskStageTypMapperValueByName = map[string]int32{
		"TKSTInvalid":         0,
		"TKSTUnAccept":        1,
		"TKSTUnFinished":      2,
		"TKSTUnReceived":      3,
		"TKSTAlreadyReceived": 4,
	}

	TaskStageTypMapperNameByValue = map[int32]string{
		0: "TKSTInvalid",
		1: "TKSTUnAccept",
		2: "TKSTUnFinished",
		3: "TKSTUnReceived",
		4: "TKSTAlreadyReceived",
	}
)

func (self TaskStageTyp) String() string {
	name, _ := TaskStageTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type TaskConditionTyp int32

const (
	TaskConditionTyp_TCTInvalid TaskConditionTyp = 0

	// 登录登录
	TaskConditionTyp_TCTLogin TaskConditionTyp = 1

	// 在线在线X秒
	TaskConditionTyp_TCTOnLine TaskConditionTyp = 2

	// 角色等级提升角色等级，并且提升后等级≥X
	TaskConditionTyp_TCTUserLevel TaskConditionTyp = 3

	// 君主等级提升君主等级，并且提升后等级≥X
	TaskConditionTyp_TCTMonarchLevel TaskConditionTyp = 4

	// 完成游戏完成X模式（支持多模式）X局游戏
	TaskConditionTyp_TCTFinishGame TaskConditionTyp = 5

	// 获得胜利获得X模式（支持多模式）X局胜利
	TaskConditionTyp_TCTGameWin TaskConditionTyp = 6

	// 武将完成局数使用X武将在Y模式（支持多模式）完成Z局游戏
	TaskConditionTyp_TCTGeneralFinishGame TaskConditionTyp = 7

	// 武将获得胜利使用X武将在Y模式（支持多模式）获得Z局胜利
	TaskConditionTyp_TCTGeneralGameWin TaskConditionTyp = 8

	// 累计消耗道具累计消耗X道具Y个
	TaskConditionTyp_TCTTotalConsumeItem TaskConditionTyp = 9

	// 消耗道具消耗X道具（道具id）Y个（领取时消耗此道具X个）
	TaskConditionTyp_TCTConsumeItem TaskConditionTyp = 10

	// 拥有道具拥有X道具（道具id）Y个（领取时不消耗此道具）
	TaskConditionTyp_TCTItemNum TaskConditionTyp = 11

	// 武将拥有X阶武将Y个
	TaskConditionTyp_TCTGeneral TaskConditionTyp = 12

	// 扩展包拥有X扩展包（支持多个扩展包）所有武将达到Y阶
	TaskConditionTyp_TCTExpansionPack TaskConditionTyp = 13

	// 皮肤拥有X品质皮肤X个
	TaskConditionTyp_TCTSkin TaskConditionTyp = 14

	// 动态皮肤拥有动态皮肤X个
	TaskConditionTyp_TCTDynamicSkin TaskConditionTyp = 15

	// 三国秀拥有X品质三国秀X个
	TaskConditionTyp_TCTShow TaskConditionTyp = 16

	// 好友数量拥有好友数量X个
	TaskConditionTyp_TCTFriend TaskConditionTyp = 17

	// 师父或徒弟拥有师父或徒弟
	TaskConditionTyp_TCTMasterOrPrentice TaskConditionTyp = 18

	// 公会拥有公会
	TaskConditionTyp_TCTGuild TaskConditionTyp = 19

	// 好友完成游戏和好友共同完成X局游戏
	TaskConditionTyp_TCTFriendFinishGame TaskConditionTyp = 20

	// 师傅完成游戏和师父共同完成X局游戏
	TaskConditionTyp_TCTMasterFinishGame TaskConditionTyp = 21

	// 完成公会擂鼓完成公会擂鼓
	TaskConditionTyp_TCTGuildDrum TaskConditionTyp = 22

	// 段位提升X模式（支持多模式）段位提升，并且提升后等级≥X
	TaskConditionTyp_TCTDanGrading TaskConditionTyp = 23

	// 牌局宝箱
	TaskConditionTyp_TCTCardChest TaskConditionTyp = 24

	// 每日经验上限
	TaskConditionTyp_TCTMaxExpEveryDay TaskConditionTyp = 25

	// 累计VIP经验达到XVIP经验
	TaskConditionTyp_TCTVipExperience TaskConditionTyp = 26

	// 合成三国秀次数合成三国秀X次
	TaskConditionTyp_TCTCompoundShowNum TaskConditionTyp = 27

	// 购买指定道具购买X道具
	TaskConditionTyp_TCTBuyShopItem TaskConditionTyp = 28

	// 累计消耗元宝累计通用元宝、绑定元宝消耗
	TaskConditionTyp_TCTTotalConsumeGold TaskConditionTyp = 29

	// 个人贡献刷新
	TaskConditionTyp_TCTContributionRefresh TaskConditionTyp = 30

	// 击杀非本方武将X模式（不填则支持任意模式）击杀非本方Y名武将
	TaskConditionTyp_TCTKillOtherGeneral TaskConditionTyp = 31
)

var (
	TaskConditionTypMapperValueByName = map[string]int32{
		"TCTInvalid":             0,
		"TCTLogin":               1,
		"TCTOnLine":              2,
		"TCTUserLevel":           3,
		"TCTMonarchLevel":        4,
		"TCTFinishGame":          5,
		"TCTGameWin":             6,
		"TCTGeneralFinishGame":   7,
		"TCTGeneralGameWin":      8,
		"TCTTotalConsumeItem":    9,
		"TCTConsumeItem":         10,
		"TCTItemNum":             11,
		"TCTGeneral":             12,
		"TCTExpansionPack":       13,
		"TCTSkin":                14,
		"TCTDynamicSkin":         15,
		"TCTShow":                16,
		"TCTFriend":              17,
		"TCTMasterOrPrentice":    18,
		"TCTGuild":               19,
		"TCTFriendFinishGame":    20,
		"TCTMasterFinishGame":    21,
		"TCTGuildDrum":           22,
		"TCTDanGrading":          23,
		"TCTCardChest":           24,
		"TCTMaxExpEveryDay":      25,
		"TCTVipExperience":       26,
		"TCTCompoundShowNum":     27,
		"TCTBuyShopItem":         28,
		"TCTTotalConsumeGold":    29,
		"TCTContributionRefresh": 30,
		"TCTKillOtherGeneral":    31,
	}

	TaskConditionTypMapperNameByValue = map[int32]string{
		0:  "TCTInvalid",
		1:  "TCTLogin",
		2:  "TCTOnLine",
		3:  "TCTUserLevel",
		4:  "TCTMonarchLevel",
		5:  "TCTFinishGame",
		6:  "TCTGameWin",
		7:  "TCTGeneralFinishGame",
		8:  "TCTGeneralGameWin",
		9:  "TCTTotalConsumeItem",
		10: "TCTConsumeItem",
		11: "TCTItemNum",
		12: "TCTGeneral",
		13: "TCTExpansionPack",
		14: "TCTSkin",
		15: "TCTDynamicSkin",
		16: "TCTShow",
		17: "TCTFriend",
		18: "TCTMasterOrPrentice",
		19: "TCTGuild",
		20: "TCTFriendFinishGame",
		21: "TCTMasterFinishGame",
		22: "TCTGuildDrum",
		23: "TCTDanGrading",
		24: "TCTCardChest",
		25: "TCTMaxExpEveryDay",
		26: "TCTVipExperience",
		27: "TCTCompoundShowNum",
		28: "TCTBuyShopItem",
		29: "TCTTotalConsumeGold",
		30: "TCTContributionRefresh",
		31: "TCTKillOtherGeneral",
	}
)

func (self TaskConditionTyp) String() string {
	name, _ := TaskConditionTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ShopBuyTyp int32

const (

	//商城购买类型
	ShopBuyTyp_SBTInvalid ShopBuyTyp = 0

	// 购买
	ShopBuyTyp_SBTBuy ShopBuyTyp = 1

	// 赠送
	ShopBuyTyp_SBTBestowal ShopBuyTyp = 2
)

var (
	ShopBuyTypMapperValueByName = map[string]int32{
		"SBTInvalid":  0,
		"SBTBuy":      1,
		"SBTBestowal": 2,
	}

	ShopBuyTypMapperNameByValue = map[int32]string{
		0: "SBTInvalid",
		1: "SBTBuy",
		2: "SBTBestowal",
	}
)

func (self ShopBuyTyp) String() string {
	name, _ := ShopBuyTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type SocialRelationTyp int32

const (

	//社交关系类型
	SocialRelationTyp_SRTInvalid SocialRelationTyp = 0

	// 好友
	SocialRelationTyp_SRTFriend SocialRelationTyp = 1

	// 求婚
	SocialRelationTyp_SRTCouple SocialRelationTyp = 2

	// 收徒
	SocialRelationTyp_SRTMaster SocialRelationTyp = 3

	// 求师
	SocialRelationTyp_SRTApprentice SocialRelationTyp = 4
)

var (
	SocialRelationTypMapperValueByName = map[string]int32{
		"SRTInvalid":    0,
		"SRTFriend":     1,
		"SRTCouple":     2,
		"SRTMaster":     3,
		"SRTApprentice": 4,
	}

	SocialRelationTypMapperNameByValue = map[int32]string{
		0: "SRTInvalid",
		1: "SRTFriend",
		2: "SRTCouple",
		3: "SRTMaster",
		4: "SRTApprentice",
	}
)

func (self SocialRelationTyp) String() string {
	name, _ := SocialRelationTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type SeatModelTyp int32

const (

	//房间模式类型
	SeatModelTyp_SMTInvalid SeatModelTyp = 0

	// 固定模式
	SeatModelTyp_SMTFixation SeatModelTyp = 1

	// 自选模式
	SeatModelTyp_SMTOptional SeatModelTyp = 2

	// 随机模式
	SeatModelTyp_SMTRandom SeatModelTyp = 3
)

var (
	SeatModelTypMapperValueByName = map[string]int32{
		"SMTInvalid":  0,
		"SMTFixation": 1,
		"SMTOptional": 2,
		"SMTRandom":   3,
	}

	SeatModelTypMapperNameByValue = map[int32]string{
		0: "SMTInvalid",
		1: "SMTFixation",
		2: "SMTOptional",
		3: "SMTRandom",
	}
)

func (self SeatModelTyp) String() string {
	name, _ := SeatModelTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type QuickJoinTableTyp int32

const (

	//快速加入房间列表类型
	QuickJoinTableTyp_QJTYInvalid QuickJoinTableTyp = 0

	// 无特殊状态
	QuickJoinTableTyp_QJTYNormal QuickJoinTableTyp = 1

	// 特殊状态
	QuickJoinTableTyp_QJTYSpecial QuickJoinTableTyp = 2
)

var (
	QuickJoinTableTypMapperValueByName = map[string]int32{
		"QJTYInvalid": 0,
		"QJTYNormal":  1,
		"QJTYSpecial": 2,
	}

	QuickJoinTableTypMapperNameByValue = map[int32]string{
		0: "QJTYInvalid",
		1: "QJTYNormal",
		2: "QJTYSpecial",
	}
)

func (self QuickJoinTableTyp) String() string {
	name, _ := QuickJoinTableTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type RewardSendTyp int32

const (
	RewardSendTyp_RSTInvalid RewardSendTyp = 0

	// 手动领取
	RewardSendTyp_RSTInitiativeGet RewardSendTyp = 1

	// 自动发放
	RewardSendTyp_RSTAutoSend RewardSendTyp = 2

	// 信件发放
	RewardSendTyp_RSTEmailSend RewardSendTyp = 3
)

var (
	RewardSendTypMapperValueByName = map[string]int32{
		"RSTInvalid":       0,
		"RSTInitiativeGet": 1,
		"RSTAutoSend":      2,
		"RSTEmailSend":     3,
	}

	RewardSendTypMapperNameByValue = map[int32]string{
		0: "RSTInvalid",
		1: "RSTInitiativeGet",
		2: "RSTAutoSend",
		3: "RSTEmailSend",
	}
)

func (self RewardSendTyp) String() string {
	name, _ := RewardSendTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type CompareConditionTyp int32

const (

	//比较条件类型
	CompareConditionTyp_CPCTInvalid CompareConditionTyp = 0

	// 等于
	CompareConditionTyp_CPCTEQ CompareConditionTyp = 1

	// 不等于
	CompareConditionTyp_CPCTNEQ CompareConditionTyp = 2

	// 大于
	CompareConditionTyp_CPCTGT CompareConditionTyp = 3

	// 小于
	CompareConditionTyp_CPCTLT CompareConditionTyp = 4

	// 大于等于
	CompareConditionTyp_CPCTGE CompareConditionTyp = 5

	// 小于等于
	CompareConditionTyp_CPCTLE CompareConditionTyp = 6
)

var (
	CompareConditionTypMapperValueByName = map[string]int32{
		"CPCTInvalid": 0,
		"CPCTEQ":      1,
		"CPCTNEQ":     2,
		"CPCTGT":      3,
		"CPCTLT":      4,
		"CPCTGE":      5,
		"CPCTLE":      6,
	}

	CompareConditionTypMapperNameByValue = map[int32]string{
		0: "CPCTInvalid",
		1: "CPCTEQ",
		2: "CPCTNEQ",
		3: "CPCTGT",
		4: "CPCTLT",
		5: "CPCTGE",
		6: "CPCTLE",
	}
)

func (self CompareConditionTyp) String() string {
	name, _ := CompareConditionTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type MatchQueueTyp int32

const (

	//匹配队列类型
	MatchQueueTyp_MQTInvalid MatchQueueTyp = 0

	// 等待匹配队列
	MatchQueueTyp_MQTWaitQueue MatchQueueTyp = 1

	// 严格匹配队列
	MatchQueueTyp_MQTStrictQueue MatchQueueTyp = 2

	// 宽松匹配队列
	MatchQueueTyp_MQTLooseQueue MatchQueueTyp = 3

	// 补人匹配队列
	MatchQueueTyp_MQTFillQueue MatchQueueTyp = 4
)

var (
	MatchQueueTypMapperValueByName = map[string]int32{
		"MQTInvalid":     0,
		"MQTWaitQueue":   1,
		"MQTStrictQueue": 2,
		"MQTLooseQueue":  3,
		"MQTFillQueue":   4,
	}

	MatchQueueTypMapperNameByValue = map[int32]string{
		0: "MQTInvalid",
		1: "MQTWaitQueue",
		2: "MQTStrictQueue",
		3: "MQTLooseQueue",
		4: "MQTFillQueue",
	}
)

func (self MatchQueueTyp) String() string {
	name, _ := MatchQueueTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GeneralGameModeTyp int32

const (
	GeneralGameModeTyp_GGMTInvalid GeneralGameModeTyp = 0

	// 身份武将
	GeneralGameModeTyp_GGMTFigur GeneralGameModeTyp = 1

	// 欢乐成双
	GeneralGameModeTyp_GGMTFun GeneralGameModeTyp = 2

	// 国战武将
	GeneralGameModeTyp_GGMTCountry GeneralGameModeTyp = 3

	// 统率三军
	GeneralGameModeTyp_GGMTSanJun GeneralGameModeTyp = 4
)

var (
	GeneralGameModeTypMapperValueByName = map[string]int32{
		"GGMTInvalid": 0,
		"GGMTFigur":   1,
		"GGMTFun":     2,
		"GGMTCountry": 3,
		"GGMTSanJun":  4,
	}

	GeneralGameModeTypMapperNameByValue = map[int32]string{
		0: "GGMTInvalid",
		1: "GGMTFigur",
		2: "GGMTFun",
		3: "GGMTCountry",
		4: "GGMTSanJun",
	}
)

func (self GeneralGameModeTyp) String() string {
	name, _ := GeneralGameModeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GeneralExtTyp int32

const (
	GeneralExtTyp_GETInvalid GeneralExtTyp = 0

	// 标准
	GeneralExtTyp_GETNormal GeneralExtTyp = 1

	// 神话再临
	GeneralExtTyp_GETShenHua GeneralExtTyp = 2

	// 界限突破
	GeneralExtTyp_GETJie GeneralExtTyp = 3

	// 一将成名
	GeneralExtTyp_GETYiJiang GeneralExtTyp = 4

	// 一世之雄
	GeneralExtTyp_GETYiShiZhiXiong GeneralExtTyp = 5

	// 国战标准
	GeneralExtTyp_GETGuoZhanBiaoZhun GeneralExtTyp = 6
)

var (
	GeneralExtTypMapperValueByName = map[string]int32{
		"GETInvalid":         0,
		"GETNormal":          1,
		"GETShenHua":         2,
		"GETJie":             3,
		"GETYiJiang":         4,
		"GETYiShiZhiXiong":   5,
		"GETGuoZhanBiaoZhun": 6,
	}

	GeneralExtTypMapperNameByValue = map[int32]string{
		0: "GETInvalid",
		1: "GETNormal",
		2: "GETShenHua",
		3: "GETJie",
		4: "GETYiJiang",
		5: "GETYiShiZhiXiong",
		6: "GETGuoZhanBiaoZhun",
	}
)

func (self GeneralExtTyp) String() string {
	name, _ := GeneralExtTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GameGradeTyp int32

const (

	// 无效值
	GameGradeTyp_GameGradeInvalid GameGradeTyp = 0

	// 侵略如火
	GameGradeTyp_GameGradeQinLueRuHuo GameGradeTyp = 1

	// 不动如山
	GameGradeTyp_GameGradeBuDongRuShan GameGradeTyp = 2

	// 运筹帷幄
	GameGradeTyp_GameGradeYunChouWeiWo GameGradeTyp = 3

	// 文武双全
	GameGradeTyp_GameGradeWenWuShuangQuan GameGradeTyp = 4
)

var (
	GameGradeTypMapperValueByName = map[string]int32{
		"GameGradeInvalid":         0,
		"GameGradeQinLueRuHuo":     1,
		"GameGradeBuDongRuShan":    2,
		"GameGradeYunChouWeiWo":    3,
		"GameGradeWenWuShuangQuan": 4,
	}

	GameGradeTypMapperNameByValue = map[int32]string{
		0: "GameGradeInvalid",
		1: "GameGradeQinLueRuHuo",
		2: "GameGradeBuDongRuShan",
		3: "GameGradeYunChouWeiWo",
		4: "GameGradeWenWuShuangQuan",
	}
)

func (self GameGradeTyp) String() string {
	name, _ := GameGradeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type TableTopTyp int32

const (

	//房间置顶类型
	TableTopTyp_TTTInvalid TableTopTyp = 0

	// 房间普通置顶
	TableTopTyp_TTTCommon TableTopTyp = 1

	// 房间高级置顶
	TableTopTyp_TTTHighGrade TableTopTyp = 2
)

var (
	TableTopTypMapperValueByName = map[string]int32{
		"TTTInvalid":   0,
		"TTTCommon":    1,
		"TTTHighGrade": 2,
	}

	TableTopTypMapperNameByValue = map[int32]string{
		0: "TTTInvalid",
		1: "TTTCommon",
		2: "TTTHighGrade",
	}
)

func (self TableTopTyp) String() string {
	name, _ := TableTopTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ItemChangeTyp int32

const (

	//道具变更类型
	ItemChangeTyp_ICTInvalid ItemChangeTyp = 0

	// 增加
	ItemChangeTyp_ICTAdd ItemChangeTyp = 1

	// 减少
	ItemChangeTyp_ICTReduce ItemChangeTyp = 2
)

var (
	ItemChangeTypMapperValueByName = map[string]int32{
		"ICTInvalid": 0,
		"ICTAdd":     1,
		"ICTReduce":  2,
	}

	ItemChangeTypMapperNameByValue = map[int32]string{
		0: "ICTInvalid",
		1: "ICTAdd",
		2: "ICTReduce",
	}
)

func (self ItemChangeTyp) String() string {
	name, _ := ItemChangeTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type RobotKindTyp int32

const (

	//机器人类型
	RobotKindTyp_RobotKindInvalid RobotKindTyp = 0

	// 普通
	RobotKindTyp_RobotKindNormal RobotKindTyp = 1

	// 玫瑰金
	RobotKindTyp_RobotKindRoseGold RobotKindTyp = 2
)

var (
	RobotKindTypMapperValueByName = map[string]int32{
		"RobotKindInvalid":  0,
		"RobotKindNormal":   1,
		"RobotKindRoseGold": 2,
	}

	RobotKindTypMapperNameByValue = map[int32]string{
		0: "RobotKindInvalid",
		1: "RobotKindNormal",
		2: "RobotKindRoseGold",
	}
)

func (self RobotKindTyp) String() string {
	name, _ := RobotKindTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type DiscountTicketTyp int32

const (

	//抵价券类型
	DiscountTicketTyp_DTTInvalid DiscountTicketTyp = 0

	// 通用
	DiscountTicketTyp_DTTCommon DiscountTicketTyp = 1

	// 指定商城类型
	DiscountTicketTyp_DTTAppointToShopTyp DiscountTicketTyp = 2

	// 指定商品ID
	DiscountTicketTyp_DTTAppointToShopGoodsID DiscountTicketTyp = 3
)

var (
	DiscountTicketTypMapperValueByName = map[string]int32{
		"DTTInvalid":              0,
		"DTTCommon":               1,
		"DTTAppointToShopTyp":     2,
		"DTTAppointToShopGoodsID": 3,
	}

	DiscountTicketTypMapperNameByValue = map[int32]string{
		0: "DTTInvalid",
		1: "DTTCommon",
		2: "DTTAppointToShopTyp",
		3: "DTTAppointToShopGoodsID",
	}
)

func (self DiscountTicketTyp) String() string {
	name, _ := DiscountTicketTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type EmailTyp int32

const (

	//邮件类型
	EmailTyp_ETInvalid EmailTyp = 0

	// 系统邮件
	EmailTyp_ETSystem EmailTyp = 1

	// 普通邮件
	EmailTyp_ETNormal EmailTyp = 2

	// 赠送邮件
	EmailTyp_ETGift EmailTyp = 3

	// 全服邮件
	EmailTyp_ETServer EmailTyp = 4
)

var (
	EmailTypMapperValueByName = map[string]int32{
		"ETInvalid": 0,
		"ETSystem":  1,
		"ETNormal":  2,
		"ETGift":    3,
		"ETServer":  4,
	}

	EmailTypMapperNameByValue = map[int32]string{
		0: "ETInvalid",
		1: "ETSystem",
		2: "ETNormal",
		3: "ETGift",
		4: "ETServer",
	}
)

func (self EmailTyp) String() string {
	name, _ := EmailTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type UserGameStatusTyp int32

const (

	//玩家游戏状态
	UserGameStatusTyp_UGSTInvalid UserGameStatusTyp = 0

	// 空闲中
	UserGameStatusTyp_UGSTFree UserGameStatusTyp = 1

	// 等待中
	UserGameStatusTyp_UGSTWaiting UserGameStatusTyp = 2

	// 游戏中
	UserGameStatusTyp_UGSTInGame UserGameStatusTyp = 3

	// 竞技中
	UserGameStatusTyp_UGSTInArena UserGameStatusTyp = 4

	// 旁观中
	UserGameStatusTyp_UGSTInLookOn UserGameStatusTyp = 5

	// 匹配中
	UserGameStatusTyp_UGSTMatching UserGameStatusTyp = 6

	// 离线
	UserGameStatusTyp_UGSTOffline UserGameStatusTyp = 7
)

var (
	UserGameStatusTypMapperValueByName = map[string]int32{
		"UGSTInvalid":  0,
		"UGSTFree":     1,
		"UGSTWaiting":  2,
		"UGSTInGame":   3,
		"UGSTInArena":  4,
		"UGSTInLookOn": 5,
		"UGSTMatching": 6,
		"UGSTOffline":  7,
	}

	UserGameStatusTypMapperNameByValue = map[int32]string{
		0: "UGSTInvalid",
		1: "UGSTFree",
		2: "UGSTWaiting",
		3: "UGSTInGame",
		4: "UGSTInArena",
		5: "UGSTInLookOn",
		6: "UGSTMatching",
		7: "UGSTOffline",
	}
)

func (self UserGameStatusTyp) String() string {
	name, _ := UserGameStatusTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GameResultTyp int32

const (

	//游戏结果
	GameResultTyp_GRTInvalid GameResultTyp = 0

	// 胜利
	GameResultTyp_GRTWin GameResultTyp = 1

	// 失败
	GameResultTyp_GRTLose GameResultTyp = 2

	// 平局
	GameResultTyp_GRTDraw GameResultTyp = 3

	// 异常
	GameResultTyp_GRTException GameResultTyp = 4
)

var (
	GameResultTypMapperValueByName = map[string]int32{
		"GRTInvalid":   0,
		"GRTWin":       1,
		"GRTLose":      2,
		"GRTDraw":      3,
		"GRTException": 4,
	}

	GameResultTypMapperNameByValue = map[int32]string{
		0: "GRTInvalid",
		1: "GRTWin",
		2: "GRTLose",
		3: "GRTDraw",
		4: "GRTException",
	}
)

func (self GameResultTyp) String() string {
	name, _ := GameResultTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GeneralCardExTyp int32

const (

	//武将扩展包
	GeneralCardExTyp_GCETInvalid GeneralCardExTyp = 0

	// 身份标准
	GeneralCardExTyp_GCETNormal GeneralCardExTyp = 1

	// 风
	GeneralCardExTyp_GCETFeng GeneralCardExTyp = 2

	// 火
	GeneralCardExTyp_GCETHuo GeneralCardExTyp = 3

	// 林
	GeneralCardExTyp_GCETLin GeneralCardExTyp = 4

	// 山
	GeneralCardExTyp_GCETShan GeneralCardExTyp = 5

	// 风神
	GeneralCardExTyp_GCETShenFeng GeneralCardExTyp = 6

	// 火神
	GeneralCardExTyp_GCETShenHuo GeneralCardExTyp = 7

	// 林神
	GeneralCardExTyp_GCETShenLin GeneralCardExTyp = 8

	// 山神
	GeneralCardExTyp_GCETShenShan GeneralCardExTyp = 9

	// 界限突破
	GeneralCardExTyp_GCETJieXian GeneralCardExTyp = 10

	// 一将成名2011
	GeneralCardExTyp_GCETYiJiang2011 GeneralCardExTyp = 11

	// 一将成名2012
	GeneralCardExTyp_GCETYiJiang2012 GeneralCardExTyp = 12

	// 一将成名2013
	GeneralCardExTyp_GCETYiJiang2013 GeneralCardExTyp = 13

	// 一将成名2014
	GeneralCardExTyp_GCETYiJiang2014 GeneralCardExTyp = 14

	// 一将成名2015
	GeneralCardExTyp_GCETYiJiang2015 GeneralCardExTyp = 15

	// 道
	GeneralCardExTyp_GCETDao GeneralCardExTyp = 16

	// 义
	GeneralCardExTyp_GCETYi GeneralCardExTyp = 17

	// 谋
	GeneralCardExTyp_GCETMou GeneralCardExTyp = 18

	// 要
	GeneralCardExTyp_GCETYao GeneralCardExTyp = 19

	// 国战武将
	GeneralCardExTyp_GCETGuoZhan GeneralCardExTyp = 20
)

var (
	GeneralCardExTypMapperValueByName = map[string]int32{
		"GCETInvalid":     0,
		"GCETNormal":      1,
		"GCETFeng":        2,
		"GCETHuo":         3,
		"GCETLin":         4,
		"GCETShan":        5,
		"GCETShenFeng":    6,
		"GCETShenHuo":     7,
		"GCETShenLin":     8,
		"GCETShenShan":    9,
		"GCETJieXian":     10,
		"GCETYiJiang2011": 11,
		"GCETYiJiang2012": 12,
		"GCETYiJiang2013": 13,
		"GCETYiJiang2014": 14,
		"GCETYiJiang2015": 15,
		"GCETDao":         16,
		"GCETYi":          17,
		"GCETMou":         18,
		"GCETYao":         19,
		"GCETGuoZhan":     20,
	}

	GeneralCardExTypMapperNameByValue = map[int32]string{
		0:  "GCETInvalid",
		1:  "GCETNormal",
		2:  "GCETFeng",
		3:  "GCETHuo",
		4:  "GCETLin",
		5:  "GCETShan",
		6:  "GCETShenFeng",
		7:  "GCETShenHuo",
		8:  "GCETShenLin",
		9:  "GCETShenShan",
		10: "GCETJieXian",
		11: "GCETYiJiang2011",
		12: "GCETYiJiang2012",
		13: "GCETYiJiang2013",
		14: "GCETYiJiang2014",
		15: "GCETYiJiang2015",
		16: "GCETDao",
		17: "GCETYi",
		18: "GCETMou",
		19: "GCETYao",
		20: "GCETGuoZhan",
	}
)

func (self GeneralCardExTyp) String() string {
	name, _ := GeneralCardExTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type CardExTyp int32

const (

	//卡牌扩展
	CardExTyp_CETInvalid CardExTyp = 0

	// 标准
	CardExTyp_CETNormal CardExTyp = 1

	// EX扩展
	CardExTyp_CETExCard CardExTyp = 2

	// 军争
	CardExTyp_CETJunZheng CardExTyp = 3

	// 3V3
	CardExTyp_CETCard3v3 CardExTyp = 4

	// 国战
	CardExTyp_CETCardGuoZhan CardExTyp = 5

	// 新1V1
	CardExTyp_CETNew1v1 CardExTyp = 6

	// 界限突破
	CardExTyp_CETJieXian CardExTyp = 7

	// 势备
	CardExTyp_CETShiBei CardExTyp = 8
)

var (
	CardExTypMapperValueByName = map[string]int32{
		"CETInvalid":     0,
		"CETNormal":      1,
		"CETExCard":      2,
		"CETJunZheng":    3,
		"CETCard3v3":     4,
		"CETCardGuoZhan": 5,
		"CETNew1v1":      6,
		"CETJieXian":     7,
		"CETShiBei":      8,
	}

	CardExTypMapperNameByValue = map[int32]string{
		0: "CETInvalid",
		1: "CETNormal",
		2: "CETExCard",
		3: "CETJunZheng",
		4: "CETCard3v3",
		5: "CETCardGuoZhan",
		6: "CETNew1v1",
		7: "CETJieXian",
		8: "CETShiBei",
	}
)

func (self CardExTyp) String() string {
	name, _ := CardExTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GameFigureTyp int32

const (

	//游戏身份
	GameFigureTyp_GFTInvalid GameFigureTyp = 0

	// 主公
	GameFigureTyp_GFTEmperor GameFigureTyp = 1

	// 忠臣
	GameFigureTyp_GFTMinister GameFigureTyp = 2

	// 反贼
	GameFigureTyp_GFTRebel GameFigureTyp = 3

	// 内奸
	GameFigureTyp_GFTProvocateur GameFigureTyp = 4
)

var (
	GameFigureTypMapperValueByName = map[string]int32{
		"GFTInvalid":     0,
		"GFTEmperor":     1,
		"GFTMinister":    2,
		"GFTRebel":       3,
		"GFTProvocateur": 4,
	}

	GameFigureTypMapperNameByValue = map[int32]string{
		0: "GFTInvalid",
		1: "GFTEmperor",
		2: "GFTMinister",
		3: "GFTRebel",
		4: "GFTProvocateur",
	}
)

func (self GameFigureTyp) String() string {
	name, _ := GameFigureTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ShopSellTyp int32

const (

	//商品售卖类型
	ShopSellTyp_SSTInvalid ShopSellTyp = 0

	// 可卖
	ShopSellTyp_SSTYes ShopSellTyp = 1

	// 非卖
	ShopSellTyp_SSTNo ShopSellTyp = 2
)

var (
	ShopSellTypMapperValueByName = map[string]int32{
		"SSTInvalid": 0,
		"SSTYes":     1,
		"SSTNo":      2,
	}

	ShopSellTypMapperNameByValue = map[int32]string{
		0: "SSTInvalid",
		1: "SSTYes",
		2: "SSTNo",
	}
)

func (self ShopSellTyp) String() string {
	name, _ := ShopSellTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type GMTyp int32

const (

	//GM命令类型
	GMTyp_GMTInvalid GMTyp = 0

	// 设置等级
	GMTyp_GMTSetLevel GMTyp = 101

	// 设置vip
	GMTyp_GMTSetVip GMTyp = 102

	// 增加道具
	GMTyp_GMTAddItems GMTyp = 201

	// 删除道具
	GMTyp_GMTDelItems GMTyp = 202

	// 封禁账户
	GMTyp_GMTLockAccount GMTyp = 301

	// 禁言账户
	GMTyp_GMTLockChat GMTyp = 302

	// 重载配置
	GMTyp_GMTReload GMTyp = 401
)

var (
	GMTypMapperValueByName = map[string]int32{
		"GMTInvalid":     0,
		"GMTSetLevel":    101,
		"GMTSetVip":      102,
		"GMTAddItems":    201,
		"GMTDelItems":    202,
		"GMTLockAccount": 301,
		"GMTLockChat":    302,
		"GMTReload":      401,
	}

	GMTypMapperNameByValue = map[int32]string{
		0:   "GMTInvalid",
		101: "GMTSetLevel",
		102: "GMTSetVip",
		201: "GMTAddItems",
		202: "GMTDelItems",
		301: "GMTLockAccount",
		302: "GMTLockChat",
		401: "GMTReload",
	}
)

func (self GMTyp) String() string {
	name, _ := GMTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type SoundTyp int32

const (

	//声音开关类型
	SoundTyp_STInvalid SoundTyp = 0

	// 开启声音
	SoundTyp_STEffective SoundTyp = 1

	// 静音
	SoundTyp_STSilence SoundTyp = 2
)

var (
	SoundTypMapperValueByName = map[string]int32{
		"STInvalid":   0,
		"STEffective": 1,
		"STSilence":   2,
	}

	SoundTypMapperNameByValue = map[int32]string{
		0: "STInvalid",
		1: "STEffective",
		2: "STSilence",
	}
)

func (self SoundTyp) String() string {
	name, _ := SoundTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type SkillSetTyp int32

const (

	//技能发动设置类型
	SkillSetTyp_SkillSetTInvalid SkillSetTyp = 0

	// 自动发动
	SkillSetTyp_SSTAuto SkillSetTyp = 1

	// 手动发动
	SkillSetTyp_SSTManual SkillSetTyp = 2

	// 详细设置
	SkillSetTyp_SSTSet SkillSetTyp = 3
)

var (
	SkillSetTypMapperValueByName = map[string]int32{
		"SkillSetTInvalid": 0,
		"SSTAuto":          1,
		"SSTManual":        2,
		"SSTSet":           3,
	}

	SkillSetTypMapperNameByValue = map[int32]string{
		0: "SkillSetTInvalid",
		1: "SSTAuto",
		2: "SSTManual",
		3: "SSTSet",
	}
)

func (self SkillSetTyp) String() string {
	name, _ := SkillSetTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type UserLockTyp int32

const (

	//用户封禁类型
	UserLockTyp_ULTInvalid UserLockTyp = 0

	// 八人军争自由
	UserLockTyp_ULTBaRenJunZhengZiYou UserLockTyp = 1

	// 八人军争至尊
	UserLockTyp_ULTBaRenJunZhengZhiZun UserLockTyp = 2

	// 八人标准
	UserLockTyp_ULTBaRenBiaoZhun UserLockTyp = 3

	// 身份竞技
	UserLockTyp_ULTShenFenJingji UserLockTyp = 4

	// 六人新手
	UserLockTyp_ULTLiuRenXinShou UserLockTyp = 5

	// 国战竞技
	UserLockTyp_ULTGuoZhanJingJi UserLockTyp = 6

	// 国战休闲
	UserLockTyp_ULTGuoZhanXiuXian UserLockTyp = 7

	// 欢乐竞技
	UserLockTyp_ULTHuanLeJingJi UserLockTyp = 8

	// 欢乐休闲
	UserLockTyp_ULTHuanLeXiuXian UserLockTyp = 9

	// 统率竞技
	UserLockTyp_ULTTongShuaiJingJi UserLockTyp = 10

	// 统率休闲
	UserLockTyp_ULTTongShuaiXiuXian UserLockTyp = 11

	// 活动
	UserLockTyp_ULTActivity UserLockTyp = 12

	// 禁言
	UserLockTyp_ULTChat UserLockTyp = 101
)

var (
	UserLockTypMapperValueByName = map[string]int32{
		"ULTInvalid":             0,
		"ULTBaRenJunZhengZiYou":  1,
		"ULTBaRenJunZhengZhiZun": 2,
		"ULTBaRenBiaoZhun":       3,
		"ULTShenFenJingji":       4,
		"ULTLiuRenXinShou":       5,
		"ULTGuoZhanJingJi":       6,
		"ULTGuoZhanXiuXian":      7,
		"ULTHuanLeJingJi":        8,
		"ULTHuanLeXiuXian":       9,
		"ULTTongShuaiJingJi":     10,
		"ULTTongShuaiXiuXian":    11,
		"ULTActivity":            12,
		"ULTChat":                101,
	}

	UserLockTypMapperNameByValue = map[int32]string{
		0:   "ULTInvalid",
		1:   "ULTBaRenJunZhengZiYou",
		2:   "ULTBaRenJunZhengZhiZun",
		3:   "ULTBaRenBiaoZhun",
		4:   "ULTShenFenJingji",
		5:   "ULTLiuRenXinShou",
		6:   "ULTGuoZhanJingJi",
		7:   "ULTGuoZhanXiuXian",
		8:   "ULTHuanLeJingJi",
		9:   "ULTHuanLeXiuXian",
		10:  "ULTTongShuaiJingJi",
		11:  "ULTTongShuaiXiuXian",
		12:  "ULTActivity",
		101: "ULTChat",
	}
)

func (self UserLockTyp) String() string {
	name, _ := UserLockTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type IpHintTyp int32

const (

	//同IP提示类型
	IpHintTyp_IHInvalid IpHintTyp = 0

	// 提示
	IpHintTyp_IHYes IpHintTyp = 1

	// 不提示
	IpHintTyp_IHNo IpHintTyp = 2
)

var (
	IpHintTypMapperValueByName = map[string]int32{
		"IHInvalid": 0,
		"IHYes":     1,
		"IHNo":      2,
	}

	IpHintTypMapperNameByValue = map[int32]string{
		0: "IHInvalid",
		1: "IHYes",
		2: "IHNo",
	}
)

func (self IpHintTyp) String() string {
	name, _ := IpHintTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type SignInTyp int32

const (

	//签到类型
	SignInTyp_SITInvalid SignInTyp = 0

	// 签到
	SignInTyp_SITSignIn SignInTyp = 1

	// 累计签到
	SignInTyp_SITGrandTotal SignInTyp = 2

	// 补签
	SignInTyp_SITRepair SignInTyp = 3
)

var (
	SignInTypMapperValueByName = map[string]int32{
		"SITInvalid":    0,
		"SITSignIn":     1,
		"SITGrandTotal": 2,
		"SITRepair":     3,
	}

	SignInTypMapperNameByValue = map[int32]string{
		0: "SITInvalid",
		1: "SITSignIn",
		2: "SITGrandTotal",
		3: "SITRepair",
	}
)

func (self SignInTyp) String() string {
	name, _ := SignInTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type DubbingStyleTyp int32

const (

	//配音风格类型
	DubbingStyleTyp_DSTInvalid DubbingStyleTyp = 0

	// 经典配音
	DubbingStyleTyp_DSTClassical DubbingStyleTyp = 1

	// 专业配音
	DubbingStyleTyp_DSTProfession DubbingStyleTyp = 2
)

var (
	DubbingStyleTypMapperValueByName = map[string]int32{
		"DSTInvalid":    0,
		"DSTClassical":  1,
		"DSTProfession": 2,
	}

	DubbingStyleTypMapperNameByValue = map[int32]string{
		0: "DSTInvalid",
		1: "DSTClassical",
		2: "DSTProfession",
	}
)

func (self DubbingStyleTyp) String() string {
	name, _ := DubbingStyleTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ModeGameTyp int32

const (
	ModeGameTyp_MGTInvalid ModeGameTyp = 0

	// 休闲
	ModeGameTyp_MGTRelaxation ModeGameTyp = 1

	// 竞技
	ModeGameTyp_MGTAthletics ModeGameTyp = 2

	// 活动
	ModeGameTyp_MGTActivity ModeGameTyp = 3
)

var (
	ModeGameTypMapperValueByName = map[string]int32{
		"MGTInvalid":    0,
		"MGTRelaxation": 1,
		"MGTAthletics":  2,
		"MGTActivity":   3,
	}

	ModeGameTypMapperNameByValue = map[int32]string{
		0: "MGTInvalid",
		1: "MGTRelaxation",
		2: "MGTAthletics",
		3: "MGTActivity",
	}
)

func (self ModeGameTyp) String() string {
	name, _ := ModeGameTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type ModeIDTyp int32

const (

	//模式ID
	ModeIDTyp_MITInvalid ModeIDTyp = 0

	// 八人军争自由
	ModeIDTyp_MITBaRenJunZhengZiYou ModeIDTyp = 1

	// 八人军争至尊
	ModeIDTyp_MITBaRenJunZhengZhiZun ModeIDTyp = 2

	// 八人标准
	ModeIDTyp_MITBaRenBiaoZhun ModeIDTyp = 3

	// 身份竞技
	ModeIDTyp_MITShenFenJingji ModeIDTyp = 4

	// 六人新手
	ModeIDTyp_MITLiuRenXinShou ModeIDTyp = 5

	// 国战竞技
	ModeIDTyp_MITGuoZhanJingJi ModeIDTyp = 6

	// 国战休闲
	ModeIDTyp_MITGuoZhanXiuXian ModeIDTyp = 7

	// 欢乐竞技
	ModeIDTyp_MITHuanLeJingJi ModeIDTyp = 8

	// 欢乐休闲
	ModeIDTyp_MITHuanLeXiuXian ModeIDTyp = 9

	// 统率竞技
	ModeIDTyp_MITTongShuaiJingJi ModeIDTyp = 10

	// 统率休闲
	ModeIDTyp_MITTongShuaiXiuXian ModeIDTyp = 11

	// 活动
	ModeIDTyp_MITActivity ModeIDTyp = 12
)

var (
	ModeIDTypMapperValueByName = map[string]int32{
		"MITInvalid":             0,
		"MITBaRenJunZhengZiYou":  1,
		"MITBaRenJunZhengZhiZun": 2,
		"MITBaRenBiaoZhun":       3,
		"MITShenFenJingji":       4,
		"MITLiuRenXinShou":       5,
		"MITGuoZhanJingJi":       6,
		"MITGuoZhanXiuXian":      7,
		"MITHuanLeJingJi":        8,
		"MITHuanLeXiuXian":       9,
		"MITTongShuaiJingJi":     10,
		"MITTongShuaiXiuXian":    11,
		"MITActivity":            12,
	}

	ModeIDTypMapperNameByValue = map[int32]string{
		0:  "MITInvalid",
		1:  "MITBaRenJunZhengZiYou",
		2:  "MITBaRenJunZhengZhiZun",
		3:  "MITBaRenBiaoZhun",
		4:  "MITShenFenJingji",
		5:  "MITLiuRenXinShou",
		6:  "MITGuoZhanJingJi",
		7:  "MITGuoZhanXiuXian",
		8:  "MITHuanLeJingJi",
		9:  "MITHuanLeXiuXian",
		10: "MITTongShuaiJingJi",
		11: "MITTongShuaiXiuXian",
		12: "MITActivity",
	}
)

func (self ModeIDTyp) String() string {
	name, _ := ModeIDTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type FriendPointTyp int32

const (

	//好友度获取类型
	FriendPointTyp_FPTInvalid FriendPointTyp = 0

	// 进行游戏
	FriendPointTyp_FPTPlayGame FriendPointTyp = 1

	// 私聊
	FriendPointTyp_FPTPrivateChat FriendPointTyp = 2

	// 邀请或跟随
	FriendPointTyp_FPTInviteOrFollow FriendPointTyp = 3

	// 赠送道具
	FriendPointTyp_FPTSendGift FriendPointTyp = 4
)

var (
	FriendPointTypMapperValueByName = map[string]int32{
		"FPTInvalid":        0,
		"FPTPlayGame":       1,
		"FPTPrivateChat":    2,
		"FPTInviteOrFollow": 3,
		"FPTSendGift":       4,
	}

	FriendPointTypMapperNameByValue = map[int32]string{
		0: "FPTInvalid",
		1: "FPTPlayGame",
		2: "FPTPrivateChat",
		3: "FPTInviteOrFollow",
		4: "FPTSendGift",
	}
)

func (self FriendPointTyp) String() string {
	name, _ := FriendPointTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type UserInviteTyp int32

const (

	//邀请类型
	UserInviteTyp_UITInvalid UserInviteTyp = 0

	// 房间邀请
	UserInviteTyp_UITTable UserInviteTyp = 1

	// 组队邀请
	UserInviteTyp_UITTeam UserInviteTyp = 2
)

var (
	UserInviteTypMapperValueByName = map[string]int32{
		"UITInvalid": 0,
		"UITTable":   1,
		"UITTeam":    2,
	}

	UserInviteTypMapperNameByValue = map[int32]string{
		0: "UITInvalid",
		1: "UITTable",
		2: "UITTeam",
	}
)

func (self UserInviteTyp) String() string {
	name, _ := UserInviteTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type MatchConfirmTyp int32

const (

	//确认取消类型
	MatchConfirmTyp_MCTInvalid MatchConfirmTyp = 0

	// 确认
	MatchConfirmTyp_MCTConfirm MatchConfirmTyp = 1

	// 取消
	MatchConfirmTyp_MCTCancel MatchConfirmTyp = 2
)

var (
	MatchConfirmTypMapperValueByName = map[string]int32{
		"MCTInvalid": 0,
		"MCTConfirm": 1,
		"MCTCancel":  2,
	}

	MatchConfirmTypMapperNameByValue = map[int32]string{
		0: "MCTInvalid",
		1: "MCTConfirm",
		2: "MCTCancel",
	}
)

func (self MatchConfirmTyp) String() string {
	name, _ := MatchConfirmTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type SuitCategoryTyp int32

const (

	//三国秀套装类型
	SuitCategoryTyp_SCTInvalid SuitCategoryTyp = 0

	// 星座
	SuitCategoryTyp_SCTConstellation SuitCategoryTyp = 1

	// 节气
	SuitCategoryTyp_SCTSolarTerm SuitCategoryTyp = 2
)

var (
	SuitCategoryTypMapperValueByName = map[string]int32{
		"SCTInvalid":       0,
		"SCTConstellation": 1,
		"SCTSolarTerm":     2,
	}

	SuitCategoryTypMapperNameByValue = map[int32]string{
		0: "SCTInvalid",
		1: "SCTConstellation",
		2: "SCTSolarTerm",
	}
)

func (self SuitCategoryTyp) String() string {
	name, _ := SuitCategoryTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: DoNotUseThis
type AchievementTyp int32

const (

	//战功记录类型
	AchievementTyp_ACTInvalid AchievementTyp = 0

	// 战功
	AchievementTyp_ACTAchievement AchievementTyp = 1

	// 战功计数器
	AchievementTyp_ACTAchievementCount AchievementTyp = 2
)

var (
	AchievementTypMapperValueByName = map[string]int32{
		"ACTInvalid":          0,
		"ACTAchievement":      1,
		"ACTAchievementCount": 2,
	}

	AchievementTypMapperNameByValue = map[int32]string{
		0: "ACTInvalid",
		1: "ACTAchievement",
		2: "ACTAchievementCount",
	}
)

func (self AchievementTyp) String() string {
	name, _ := AchievementTypMapperNameByValue[int32(self)]
	return name
}

// Defined in table: GameItemConfig
type GameItemConfig struct {

	//DoNotUseThis
	DoNotUseThis []*DoNotUseThisDefine

	//ItemConf
	ItemConf []*ItemConfDefine
}

// Defined in table: DoNotUseThis
type DoNotUseThisDefine struct {

	//唯一ID
	ConfID int32
}

// Defined in table: ItemConf
type ItemPack struct {

	// 道具ID
	ItemID int32 `json:"itemID"`

	// 数量
	Num int32 `json:"num"`
}

// Defined in table: ItemConf
type ItemConfDefine struct {

	//道具唯一ID
	ItemID int32

	//道具名称
	ItemName string

	//道具类型
	ItemType ItemTyp

	//商品描述
	ItemDesc string

	//使用等级限制
	LevelLimit int32

	//使用君主等级限制
	MonarchLevelLimit int32

	//是否时限
	IsLimit BoolTyp

	//有效时间(秒)
	ValidPeriod int32

	//到期时间
	ExpireTime string

	//到期后是否自动删除
	AutoDeleteAfterExpire BoolTyp `ServerOnly:"true"`

	//宝箱类型
	ChestType ChestTyp

	//掉落规则ID
	DropID int32

	//是否自动使用
	AutoUse BoolTyp

	//宝箱品质
	ChestGradeType ChestGradeTyp

	//皮肤ID
	SkinID int32

	//动态关联皮肤道具ID
	RelationSkinItemID int32

	//分解默认数量
	DecomposeDefaultNum int32

	//分解活动数量
	DecomposeActivityNum int32

	//分解活动开始时间
	DecomposeActivityTimeStart string

	//分解活动结束时间
	DecomposeActivityTimeEnd string

	//合成默认数量
	ComposeDefaultNum int32

	//合成活动数量
	ComposeActivityNum int32

	//合成活动开始时间
	ComposeActivityTimeStart string

	//合成活动结束时间
	ComposeActivityTimeEnd string

	//货币类型
	CurrencyType CurrencyTyp

	//装扮类型
	DressType DressTyp

	//装扮品质
	DressGradeType DressGradeTyp

	//搜索关键字
	Searchkey string

	//武将ID
	GeneralID int32

	//默认皮肤
	DefaultSkinID int32

	//效果值
	EffectValues []int32

	//参数
	Params []string

	//品质
	OtherGradeType OtherGradeTyp

	//是否出现在包裹
	InPackage BoolTyp

	//是否可以手动删除
	CanDeleteManual BoolTyp

	//商城类型
	ShopType ShopTyp

	//货币类型
	CurrencyPack []CurrencyTyp

	//购买需要的货币ID
	CurrencyItemID []int32

	//默认价格
	Price int32

	//活动价格
	ActivityPrice int32

	//活动价格开始时间
	ActivityTimeStart string

	//活动价格结束时间
	ActivityTimeEnd string

	//是否可以赠送
	IsGift BoolTyp

	//公会职位
	GuildRoleType GuildRoleTyp

	//包含道具ID
	DropItemPack []*ItemPack

	//限购类型
	BuyLimitType BuyLimitTyp

	//限购设置
	BuyLimitPeriodType BuyLimitPeriodTyp

	//限购数量
	BuyLimitNum int32

	//道具限购
	BuyLimitItemID []int32

	//提前上架时间
	ShowTimeStart string

	//上架时间
	SellTimeStart string

	//下架时间
	SellTimeEnd string

	//资源
	Resource int32

	//抵价券类型
	DiscountTicketType DiscountTicketTyp

	//商城商品ID
	ShopGoodsID []int32

	//抵扣券要求满额
	DiscountLimitPrice int32

	//抵扣价格
	DiscountPrice int32

	//是否新品
	IsNew BoolTyp

	//其他道具分类
	OtherItemType string

	//排序
	Order int32

	//售卖类型
	ShopSellType ShopSellTyp

	//是否可续费
	CanRenewal BoolTyp

	//续费道具id
	RenewalItemID int32

	//是否可在背包使用
	CanUseInPackage BoolTyp

	//是否需要通知任务
	IsNeddNotifyTask BoolTyp

	//获得提示
	GetHintType int32
}

// GameItemConfig 访问接口
type GameItemConfigTable struct {

	// 表格原始数据
	GameItemConfig

	// 索引函数表
	indexFuncByName map[string][]func(*GameItemConfigTable) error

	// 清空函数表
	clearFuncByName map[string][]func(*GameItemConfigTable) error

	// 加载前回调
	preFuncList []func(*GameItemConfigTable) error

	// 加载后回调
	postFuncList []func(*GameItemConfigTable) error

	DoNotUseThisByConfID map[int32]*DoNotUseThisDefine

	ItemConfByItemID map[int32]*ItemConfDefine
}

// 从json文件加载
func (self *GameItemConfigTable) Load(filename string) error {

	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	var newTab GameItemConfig

	// 读取
	err = json.Unmarshal(data, &newTab)
	if err != nil {
		return err
	}

	// 所有加载前的回调
	for _, v := range self.preFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	// 清除前通知
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 复制数据
	self.GameItemConfig = newTab

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 所有完成时的回调
	for _, v := range self.postFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *GameItemConfigTable) RegisterIndexEntry(name string, indexCallback func(*GameItemConfigTable) error, clearCallback func(*GameItemConfigTable) error) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 注册加载前回调
func (self *GameItemConfigTable) RegisterPreEntry(callback func(*GameItemConfigTable) error) {

	self.preFuncList = append(self.preFuncList, callback)
}

// 注册所有完成时回调
func (self *GameItemConfigTable) RegisterPostEntry(callback func(*GameItemConfigTable) error) {

	self.postFuncList = append(self.postFuncList, callback)
}

// 创建一个GameItemConfig表读取实例
func NewGameItemConfigTable() *GameItemConfigTable {
	return &GameItemConfigTable{

		indexFuncByName: map[string][]func(*GameItemConfigTable) error{

			"DoNotUseThis": {func(tab *GameItemConfigTable) error {

				// DoNotUseThis
				for _, def := range tab.DoNotUseThis {

					if _, ok := tab.DoNotUseThisByConfID[def.ConfID]; ok {
						panic(fmt.Sprintf("duplicate index in DoNotUseThisByConfID: %v", def.ConfID))
					}

					tab.DoNotUseThisByConfID[def.ConfID] = def

				}

				return nil
			}},

			"ItemConf": {func(tab *GameItemConfigTable) error {

				// ItemConf
				for _, def := range tab.ItemConf {

					if _, ok := tab.ItemConfByItemID[def.ItemID]; ok {
						panic(fmt.Sprintf("duplicate index in ItemConfByItemID: %v", def.ItemID))
					}

					tab.ItemConfByItemID[def.ItemID] = def

				}

				return nil
			}},
		},

		clearFuncByName: map[string][]func(*GameItemConfigTable) error{

			"DoNotUseThis": {func(tab *GameItemConfigTable) error {

				// DoNotUseThis

				tab.DoNotUseThisByConfID = make(map[int32]*DoNotUseThisDefine)

				return nil
			}},

			"ItemConf": {func(tab *GameItemConfigTable) error {

				// ItemConf

				tab.ItemConfByItemID = make(map[int32]*ItemConfDefine)

				return nil
			}},
		},

		DoNotUseThisByConfID: make(map[int32]*DoNotUseThisDefine),

		ItemConfByItemID: make(map[int32]*ItemConfDefine),
	}
}
