package main

import (
	"fmt"
	"reflect"
)

package main

import (
"errors"
"fmt"
"reflect"
"strings"
)

type User struct {
	Name string `field:"name" json:"name"`
}

type DataModel struct {
	Data interface{}
}

func main() {
	//u := &User{
	//	Name: "xujialong",
	//}
	////x := (User)(nil)
	////fmt.Println(x)
	////fmt.Println(reflect.TypeOf((User)(nil)))
	////fmt.Println(reflect.TypeOf(*u))
	//
	//data, _ := json.Marshal(u)
	//
	////u1 := &User{}
	////json.Unmarshal(data, u1)
	////fmt.Println(u1)
	//m := (*User)(nil)
	//fmt.Println(m, reflect.TypeOf(m))
	//model := &DataModel{
	//	Data: (*User)(nil),
	//}
	//err := json.Unmarshal(data, &model.Data)
	//fmt.Println(model.Data, err)
	//typ := reflect.TypeOf(model.Data)
	//fmt.Println(typ, typ.Elem())
	//v := reflect.ValueOf(model.Data)
	//fmt.Println(v)
	//e := v.Elem()
	//inter := e.Interface()
	//fmt.Println(v, e, inter, reflect.TypeOf(v), reflect.TypeOf(e), reflect.TypeOf(inter).Kind())
	//fmt.Println(model2SqlColumn(*u))
	//m := reflect.TypeOf(model.Data)
	//fmt.Println()
	//fmt.Println(reflect.ValueOf(model.Data).Interface())
	//uk := reflect.TypeOf(&User{})
	//fmt.Println(uk.Kind())
	//fmt.Println(model2SqlColumn(inter))
	//fmt.Println(model2SqlValue(inter))

	i := 1
	var m interface{} = i
	x, ok := m.(int)
	fmt.Println(x, ok, &x, &i)
}

//根据标签field得到string,如areaID, name ?,?
func model2SqlColumn(model interface{}) (string, string) {
	m := reflect.TypeOf(model)
	result := ""
	valueNumString := ""
	if m != nil {
		slice := make([]string, 0, m.NumField())
		vSlice := make([]string, 0, m.NumField())
		for i := 0; i < m.NumField(); i++ {
			tag := m.Field(i).Tag.Get("field")
			if tag == "-" {
				continue
			}
			slice = append(slice, tag)
			vSlice = append(vSlice, "?")
		}
		result = strings.Join(slice, ", ")
		valueNumString = strings.Join(vSlice, ",")
	}
	return result, valueNumString
}

func model2SqlValue(model interface{}) (string, error) {
	m := reflect.TypeOf(model)
	value := reflect.ValueOf(model)
	result := "("
	if m == nil {
		return "", errors.New("no model type")
	}
	if m == nil {
		return "", errors.New("no model type")
	}
	for i := 0; i < m.NumField(); i++ {
		tag := m.Field(i).Tag.Get("field")
		if tag == "-" {
			continue
		}
		if i != 0 {
			result = fmt.Sprintf("%v,", result)
		}
		result = fmt.Sprintf("%v%v", result, value.Field(i))
	}
	result = fmt.Sprintf("%v)", result)
	return result, nil
}
